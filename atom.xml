<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stdasein.life</id>
    <title>Dasein</title>
    <updated>2020-09-24T01:21:51.771Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://stdasein.life"/>
    <link rel="self" href="https://stdasein.life/atom.xml"/>
    <subtitle>Freiheit als Autonomie</subtitle>
    <logo>https://stdasein.life/images/avatar.png</logo>
    <icon>https://stdasein.life/favicon.ico</icon>
    <rights>All rights reserved 2020, Dasein</rights>
    <entry>
        <title type="html"><![CDATA[Lending Club贷款分析及违约预测]]></title>
        <id>https://stdasein.life/post/Lending Club Loan/</id>
        <link href="https://stdasein.life/post/Lending Club Loan/">
        </link>
        <updated>2020-09-14T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-项目背景">一、项目背景</h3>
<p><strong>背景介绍</strong></p>
<blockquote>
<p>作为旧金山的一家个人对个人的借贷公司，Lending Club利用网络技术打造交易平台，直接连接了个人投资者和个人借贷者，通过此种方式，缩短了资金流通的细节，尤其是绕过了传统的大银行等金融机构，使得投资者和借贷者都能得到更多实惠、更快捷。对于投资者来说可以获得更好的回报，而对于借贷者来说，则可以获得相对较低的贷款利率。</p>
</blockquote>
<p><strong>数据来源</strong></p>
<p><a href="https://www.kaggle.com/wordsforthewise/lending-club/discussion">Kaggle:All Lending Club loan data</a></p>
<h3 id="二-提出问题">二、提出问题</h3>
<ul>
<li>通过探索性数据分析建立用户画像</li>
<li>利用机器学习进行违约预测</li>
</ul>
<h3 id="三-分析框架">三、分析框架</h3>
<figure data-type="image" tabindex="1"><img src="https://stdasein.life/post-images/1600135592031.png" alt="" width="500" height="300" loading="lazy"></figure>
<h3 id="四-前期准备">四、前期准备</h3>
<p>设置基本环境，导入pandas、numpy等要用到的库</p>
<pre><code class="language-python">import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# 忽略弹出的warnings
import warnings
warnings.filterwarnings('ignore') 
# 指定默认字体
plt.rcParams['font.sans-serif'] = ['SimHei']  
# 解决保存图像是负号'-'显示为方块的问题
plt.rcParams['axes.unicode_minus'] = False 
</code></pre>
<p>探索文件体积大小，以防后续出现加载过慢或内存报错等问题</p>
<pre><code class="language-python">count = 0
fp = open('lendingclub.csv', &quot;r&quot;, encoding='utf-8')
while 1:
    buffer = fp.read(8*1024*1024)
    if not buffer:
        break
    count += buffer.count('\n')
print(count)
print('over')
fp.close()
</code></pre>
<pre><code class="language-python">2260702
over
</code></pre>
<p>文件有200多万行，这可能导致内存不足，因此我们选择通过chunksize参数选取部分内容进行分析，chunksize的具体用法参见<a href="https://stackoverflow.com/questions/11622652/large-persistent-dataframe-in-pandas/12193309#12193309"><strong>Stack Overflow</strong></a></p>
<pre><code class="language-python">path = 'lendingclub.csv'
reader = pd.read_csv(path,chunksize = 500000)

for i,ck in enumerate(reader):
    print(i,'',len(ck))
    ck.to_csv('D:\学习\jupyter notebook'+str(i)+'.csv', index=False)
</code></pre>
<pre><code class="language-python">0  500000
1  500000
2  500000
3  500000
4  260701
</code></pre>
<p>我们将文件分成了5块，选择其中行数为260,701的1块进行分析</p>
<pre><code class="language-python">path = 'D:\学习\jupyter notebook4.csv'
data = pd.read_csv(path)
</code></pre>
<h3 id="五-探索性数据分析eda">五、探索性数据分析（EDA)</h3>
<p>探索性数据分析（EDA)是指<strong>通过作图、制表、计算特征量等手段探索数据的结构和规律的一种数据分析方法</strong>，旨在为后续的流程提供决策辅助，其分析框架如下图所示:</p>
<figure data-type="image" tabindex="2"><img src="https://stdasein.life/post-images/1600135732992.png" alt="" width="500" height="300" loading="lazy"></figure>
<h4 id="1概况分析">1.概况分析</h4>
<p>在这个环节我们的关注点集中在数据集的整体概况上，要求从特征值数量、数据质量、数据类型等方面对数据集进行评估。</p>
<p>查看数据集的样本数量和每个样本的特征数量：</p>
<pre><code class="language-python">data.shape
</code></pre>
<pre><code class="language-python">(260701, 151)
</code></pre>
<p>可见，数据集有260,701名用户的贷款资料，且有151个分析维度（贷款金额、工作年限等）</p>
<p>查看前5个样本：</p>
<pre><code class="language-python">data.head()
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://stdasein.life/post-images/1600135976132.png" alt="" loading="lazy"></figure>
<p>注意：这里只截取了部分特征。显然，有些特征（例如member_id）有较多的缺失值，可考虑在数据预处理环节进行进一步分析、清理。</p>
<p>进行描述性统计分析：</p>
<pre><code>data.describe(include = 'all')
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://stdasein.life/post-images/1600136090223.png" alt="" loading="lazy"></figure>
<p>describe()函数可以帮助我们了解数据的集中趋势（均值、众数）、离散程度（极差、标准差）和分布状况（分位数）等，而对于类别型数据，则能够提供唯一值数量、频数最高的值等信息。以emp_title为例，我们可以得知在众多贷款者中，从事最多的职业是老师，这揭示了金融机构放贷的偏好。</p>
<p>查看数据类型：</p>
<pre><code class="language-python">num_feature = data.select_dtypes(include = ['number']).columns
num_feature
</code></pre>
<pre><code class="language-python">Index(['member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'int_rate',
       'installment', 'annual_inc', 'dti', 'delinq_2yrs', 'fico_range_low',
       ...
       'deferral_term', 'hardship_amount', 'hardship_length', 'hardship_dpd',
       'orig_projected_additional_accrued_interest',
       'hardship_payoff_balance_amount', 'hardship_last_payment_amount',
       'settlement_amount', 'settlement_percentage', 'settlement_term'],
      dtype='object', length=113)
</code></pre>
<pre><code class="language-python">cat_feature = data.select_dtypes(include = ['object']).columns
cat_feature
</code></pre>
<pre><code class="language-python">Index(['id', 'term', 'grade', 'sub_grade', 'emp_title', 'emp_length',
       'home_ownership', 'verification_status', 'issue_d', 'loan_status',
       'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code',
       'addr_state', 'earliest_cr_line', 'initial_list_status', 'last_pymnt_d',
       'next_pymnt_d', 'last_credit_pull_d', 'application_type',
       'verification_status_joint', 'sec_app_earliest_cr_line',
       'hardship_flag', 'hardship_type', 'hardship_reason', 'hardship_status',
       'hardship_start_date', 'hardship_end_date', 'payment_plan_start_date',
       'hardship_loan_status', 'disbursement_method', 'debt_settlement_flag',
       'debt_settlement_flag_date', 'settlement_status', 'settlement_date'],
      dtype='object')
</code></pre>
<p>经过初步筛选，我们发现数据集中有113个数值型特征，其余皆为分类型，然而有些特征的类型需要在后续进行调整，例如工作年限em_length可能归为数值型更合适。</p>
<h4 id="2用户画像">2.用户画像</h4>
<p><strong>（1）用户基本信息</strong></p>
<figure data-type="image" tabindex="5"><img src="https://stdasein.life/post-images/1600136180233.png" alt="" width="500" height="300" loading="lazy"></figure>
<p><strong>地域分布（颜色越深表示该区域客户数量越多）</strong></p>
<figure data-type="image" tabindex="6"><img src="https://stdasein.life/post-images/1600136333092.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：客户数量最多的前四个州分别是加州(35,048）、德州(22,007)、纽约(21,210)和弗罗里达(19,519)，而爱荷华客户数量最少(0)；此外，沿海地区的客户数量整体上要高于内陆地区。</p>
<p>提出假设：贷款数量与区域经济发展程度有关。</p>
<p>验证假设：我们可以将平均年收入和总年收入作为衡量一个州经济发展程度的指标，以此来验证先前提出的假设。</p>
<figure data-type="image" tabindex="7"><img src="https://stdasein.life/post-images/1600136406450.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>上图中，方块越大代表总收入越高，而颜色越红代表年均收入越高。</p>
<p>我们可以看见，经济规模前四的州分别是加州、德州、纽约和弗罗里达，正好与贷款数量前四的州一一对应；同时，年均收入较高的州（颜色红）大部分都位于沿海地区。</p>
<p><strong>收入分布</strong></p>
<figure data-type="image" tabindex="8"><img src="https://stdasein.life/post-images/1600136477730.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：客户收入呈现正偏态分布（即平均数大于中位数，中位数大于众数），其中，位于4,0000-6,0000美元收入区间内的客户人数最多。</p>
<p>提出假设：相较于高收入人群，收入中等偏下的人群有更高的贷款需求，而低收入人群则更难通过贷款审核。</p>
<p><strong>职业分布</strong></p>
<figure data-type="image" tabindex="9"><img src="https://stdasein.life/post-images/1600136564750.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：除了经理(manager)这一职业占比高达14.98%外，前十名的其他职业，例如主管(Supervisor 2.87%)、老师(2.86%)等，占比差距并不大。</p>
<p>提出假设：以经理为职业的人群收入更高，机构更容易发放贷款。</p>
<p>验证假设：我们可以尝试加入<strong>年收入中值</strong>维度进行分析（以颜色表示，从深绿到深黄，年收入中值递增）</p>
<figure data-type="image" tabindex="10"><img src="https://stdasein.life/post-images/1600136641266.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>结果显示，尽管经理的收入在前十的职业中并不低，但也没有明显的优势，不能简单的认为其数量优势是来自与高收入，因此假设不成立。</p>
<p>修改假设：经理可能是更具代表性的管理层的一种泛称，客户倾向于使用这样的称呼来代替具体的管理职务。</p>
<p><strong>工作年限</strong></p>
<p>根据经验，工作年限越长收入越高，因此我们可以将工作年限与收入进行组合分析来验证这一点。</p>
<figure data-type="image" tabindex="11"><img src="https://stdasein.life/post-images/1600136744140.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：收入与工作年限成正比（由绿到红）；10年及以上工作年限的客户占比最高（36.08%），说明贷款机构偏好高工作年限的客户，但另一方面，低工作年限（0-3年）的人群占比也接近35%。</p>
<p>提出假设：<strong>贷款机构可能通过提高利率、降低贷款额来弥补风险（对低工作年限人群）</strong></p>
<p>验证假设</p>
<figure data-type="image" tabindex="12"><img src="https://stdasein.life/post-images/1600136823891.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>总的来说，工作年限越高，贷款额度越高，同时，利率也越低（红到灰），假设成立。</p>
<p><strong>住房情况</strong></p>
<figure data-type="image" tabindex="13"><img src="https://stdasein.life/post-images/1600136893018.png" alt="" width="400" height="300" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://stdasein.life/post-images/1600137021854.png" alt="" width="200" height="100" loading="lazy"></figure>
<p>分析发现：约半数的客户有抵押贷款，经济实力较强、拥有自己的房子的客户仅占12.35%，而剩下的将近40%的客户处于租房住的状态。</p>
<p>提出假设：住房情况与工作年限、收入正相关。</p>
<p>验证假设：通过仪表板关联图表进行分析</p>
<figure data-type="image" tabindex="15"><img src="https://stdasein.life/post-images/1600137100977.png" alt="" width="600" height="300" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://stdasein.life/post-images/1600137167889.png" alt="" width="600" height="300" loading="lazy"></figure>
<p>对比发现，40%拥有住房的客户工作年限在10年以上，而租房客户仅占约26%，假设成立。</p>
<p><strong>贷款目的</strong></p>
<figure data-type="image" tabindex="17"><img src="https://stdasein.life/post-images/1600137237767.png" alt="" width="600" height="300" loading="lazy"></figure>
<p>分析发现：大部分贷款目的（55%债务重组、20%还信用卡，总共75%）是借新债还旧债。</p>
<p>提出假设：以还债为目的的贷款利率更高。</p>
<p>验证假设：以利率和贷款目的为坐标轴画散点图<br>
<img src="https://stdasein.life/post-images/1600137328383.png" alt="" width="600" height="300" loading="lazy"><br>
信用卡、债务重组项的利率并不突出，假设不成立。</p>
<p><strong>月偿还额收入比</strong></p>
<figure data-type="image" tabindex="18"><img src="https://stdasein.life/post-images/1600137404488.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>大部分客户的月偿还收入比都在30%以下，其中偿收比在10%-21%的人群占比约为55%，可见，整体上，客户群体的偿债能力还是比较高的。</p>
<p><strong>（2）客户信用记录</strong></p>
<ul>
<li>借款者过去两年借款逾期超过30天次数</li>
<li>距离最近逾期的月份数</li>
<li>负面记录</li>
<li>违约金额</li>
</ul>
<p><strong>借款者过去两年借款逾期超过30天次数</strong></p>
<figure data-type="image" tabindex="19"><img src="https://stdasein.life/post-images/1600137472539.png" alt="" width="400" height="300" loading="lazy"></figure>
<p>气泡图显示，81.05%的客户在近两年不存在逾期行为，说明大部分客户还是信用良好的，而在有逾期行为的客户中，逾期1次的占多数（12.6%）。</p>
<p><strong>距离最近一次逾期的月数&amp;负面记录分析</strong></p>
<figure data-type="image" tabindex="20"><img src="https://stdasein.life/post-images/1600137546639.png" alt="" width="400" height="300" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://stdasein.life/post-images/1600137610640.png" alt="" width="400" height="300" loading="lazy"></figure>
<p>分析发现：如果把时间维度拉长，曾有逾期行为的客户数量将增至接近总数的一半（130,026），但是，机构对客户的负面记录基本与近两年逾期情况的分布一致，这可能说明在很大程度上，机构只考虑前两年的信用状况。</p>
<p><strong>违约金额分布</strong></p>
<figure data-type="image" tabindex="22"><img src="https://stdasein.life/post-images/1600137685878.png" alt="" width="550" height="300" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://stdasein.life/post-images/1600137758612.png" alt="" width="100" height="200" loading="lazy"></figure>
<p>分析发现：从整体上来说，逾期次数与逾期金额成反比，逾期金额主要分布在1100美元以下的区间内，其中0—200美元区间内的逾期次数最多。逾期的贷款多是用于借新债还旧债，与贷款目的分布一致。</p>
<p><strong>（3）产品数据</strong></p>
<ul>
<li>借款者的信用等级</li>
<li>贷款额度</li>
<li>贷款期限</li>
<li>贷款利率</li>
<li>贷款状态</li>
</ul>
<p><strong>信用等级、贷款额度与利率（不同的形状代表不同的信用等级，颜色代表频率）</strong></p>
<figure data-type="image" tabindex="24"><img src="https://stdasein.life/post-images/1600137829120.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：</p>
<ul>
<li>利率与信用等级成反比，信用等级越低则利率越高，其中A级信用的利率均值仅为7.03%，而G级却高达30.35%;</li>
<li>B级和C级发放贷款的总量最高，G级最低。</li>
</ul>
<p><strong>贷款额度、利率与期限（颜色代表贷款额度）</strong></p>
<figure data-type="image" tabindex="25"><img src="https://stdasein.life/post-images/1600137893038.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>分析发现：机构偏向发放低期限的贷款，尽管高期限的贷款利率更高，可能是出于规避风险的需要。</p>
<p><strong>贷款状态</strong></p>
<figure data-type="image" tabindex="26"><img src="https://stdasein.life/post-images/1600137971630.png" alt="" width="400" height="250" loading="lazy"></figure>
<p>分析发现:</p>
<ul>
<li>有53.19%的贷款还在进行中，无法判断最终是否形成坏账</li>
<li>有33.82%的贷款顺利完成；</li>
<li>有10.48%的借款无法收回（charged off）</li>
<li>有1.62%的客户存在逾期（30-120天）</li>
</ul>
<h3 id="六-数据预处理">六、数据预处理</h3>
<figure data-type="image" tabindex="27"><img src="https://stdasein.life/post-images/1600138044677.png" alt="" width="500" height="300" loading="lazy"></figure>
<h4 id="1处理缺失值">1.处理缺失值</h4>
<figure data-type="image" tabindex="28"><img src="https://stdasein.life/post-images/1600138099943.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>处理缺失值主要有5种方法：</p>
<ul>
<li>删除含有缺失值的特征：适用于缺失值过多的特征</li>
<li>特殊值填充：这个是认为数据的空值也是具有一定的信息的，它之所以为空，是因为它不同于其他的任何数据。所以将空值作为一种特殊的属性值来处理，它不同于其他的任何属性值。如所有的空值都用“unknown”填充。</li>
<li>统计值填充：如果空值是<strong>数值型</strong>的，就根据该属性在其他所有对象的取值的统计值（例如平均值）来填充该缺失的属性值；如果空值是<strong>非数值型</strong>的，就根据统计学中的众数原理，用该属性在其他所有对象的取值次数最多的值(即出现频率最高的值)来补齐该缺失的属性值。</li>
<li>最近邻法：先根据欧式距离或相关分析来确定距离具有缺失数据样本最近的K个样本，将这K个值加权平均来估计该样本的缺失数据。缺点：在于难以定义相似标准，主观因素较多。</li>
<li>模型预测：基于完整的数据集，建立预测模型。对于包含空值的对象，将已知属性值代入方程来估计未知属性值，以此估计值来进行填充。其实就是假设特征之间也存在一定的关系，可以通过预测来得到缺失值。但是我个人不建议使用这个方法，因为有些麻烦，而且不确定这样得到的填充值的效果。又<strong>可能出现模型过拟合等新问题</strong>。</li>
</ul>
<p>为了方便起见，我们选择前三种方法处理缺失值。</p>
<p><strong>（1）查看缺失值分布</strong></p>
<pre><code class="language-python">#定义计算各特征缺失比例的函数
def CountNull(data):
    null_count = data.isnull().sum().sort_values(ascending = False)
    ratio = null_count/len(data)
    nulldata = pd.concat([null_count,ratio],axis = 1, keys=['count','ratio'])
    return nulldata[ratio&gt;0]

CountNull(data)
</code></pre>
<figure data-type="image" tabindex="29"><img src="https://stdasein.life/post-images/1600138239863.png" alt="" width="400" height="300" loading="lazy"></figure>
<p><strong>（2）使用dropna删除含缺失值的特征</strong></p>
<p>通过查看缺失值的分布，我们发现部分特征的缺失情况很严重，有的缺失比例甚至能够达到99%以上，这样的特征对预测没有实际的意义，可以考虑设置阈值（例如缺失比达到50%），并用dropna删除达到阈值的特征。</p>
<pre><code class="language-python">#用dropna删去缺失值比例大于50%的特征
half_count = len(data)/2 
data = data.dropna(thresh = half_count, axis = 1 ) 
</code></pre>
<pre><code class="language-python">data.shape
</code></pre>
<pre><code class="language-python">(260701, 108)
</code></pre>
<pre><code class="language-python">CountNull(data)
</code></pre>
<figure data-type="image" tabindex="30"><img src="https://stdasein.life/post-images/1600138406848.png" alt="" width="400" height="300" loading="lazy"></figure>
<p>经过筛选，特征重由原来的151个变为108个。</p>
<p><strong>（3）填充缺失值</strong></p>
<p><strong>填充数值型特征的缺失值</strong></p>
<ul>
<li>
<p>筛选空值有含义的特征，填充特殊值</p>
</li>
<li>
<p>对于其余特征，包括缺失值占比在1%以下的特征，直接用平均值进行填充。</p>
</li>
</ul>
<pre><code class="language-python">#筛选数值型特征
num_feature = data.select_dtypes('number')
num_names = num_feature.columns
num_names
</code></pre>
<pre><code class="language-python">Index(['loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'int_rate',
       'installment', 'annual_inc', 'loan_status', 'dti', 'delinq_2yrs',
       'fico_range_low', 'fico_range_high', 'inq_last_6mths', 'open_acc',
       'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'out_prncp',
       'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp',
       'total_rec_int', 'total_rec_late_fee', 'recoveries',......])
</code></pre>
<p>根据官方的说明文件，'il_util','num_tl_120dpd_2m','bc_util'的空值等同于0，以此我们可以将其筛选出来。另外，'mths_since_recent_inq'表示距离最近一次逾期的月份数，缺失值可能是因为客户不存在逾期情况，我们可以选择填充一个较大的数字，例如100，将其与其他情况区分开来。</p>
<pre><code class="language-python">num_zero = ['il_util','num_tl_120dpd_2m','bc_util']
num_100  = ['mths_since_recent_inq']
data[num_zero] = data[num_zero].fillna(0)
data[num_100] = data[num_100].fillna(100)
</code></pre>
<p>对余下的特征用均值进行填充</p>
<pre><code class="language-python">#筛选含有缺失值的数值型特征
num_null = CountNull(data).index
nominal_null_feature = [i for i in num_null if i in num_names]
#填充均值
data[nominal_null_feature] = data[nominal_null_feature].fillna(data[nominal_null_feature].mean())
</code></pre>
<p><strong>填充类别型特征的缺失值</strong></p>
<ul>
<li>直接填充'Unknown'</li>
</ul>
<pre><code class="language-python">cat_feature =  data.select_dtypes('object')
cat_names = cat_feature.columns
cat_names
</code></pre>
<pre><code class="language-python">Index(['id', 'term', 'grade', 'sub_grade', 'emp_title', 'emp_length',
       'home_ownership', 'verification_status', 'issue_d', 'pymnt_plan', 'url',
       'purpose', 'title', 'zip_code', 'addr_state', 'earliest_cr_line',
       'initial_list_status', 'last_pymnt_d', 'next_pymnt_d',
       'last_credit_pull_d', 'application_type', 'hardship_flag',
       'disbursement_method', 'debt_settlement_flag'],
      dtype='object')
</code></pre>
<pre><code class="language-python">data[cat_names] = data[cat_names].fillna('Unknown')
data.isnull().sum()
</code></pre>
<h4 id="2处理异常值">2.处理异常值</h4>
<figure data-type="image" tabindex="31"><img src="https://stdasein.life/post-images/1600138468584.png" alt="" width="500" height="300" loading="lazy"></figure>
<p><strong>（1）简单统计</strong></p>
<pre><code class="language-python">des = data.describe()
des.sort_values(by = 'std',ascending = False,axis = 1)
</code></pre>
<figure data-type="image" tabindex="32"><img src="https://stdasein.life/post-images/1600138545220.png" alt="" loading="lazy"></figure>
<p>对标准差进行排序后，我们发现'tot_hi_cred_lim'（最高限额）的离散程度最大，这说明该特征可能存在异常值，需要我们作出进一步的判断。</p>
<p>我们可以利用散点图找出异常值，x变量为最高限额，y变量为年收入。</p>
<pre><code class="language-python">import seaborn as sns
sns.scatterplot(x = 'tot_hi_cred_lim', y = 'annual_inc', data = data)
</code></pre>
<p><img src="https://stdasein.life/post-images/1600138604084.png" alt="" width="500" height="300" loading="lazy"><br>
一般来说，信用额度与收入成正比，但右下角的点显然不符合这一规律，我们可以将其视为异常点进行删除</p>
<pre><code class="language-python">data[data['tot_hi_cred_lim'] &gt; 5000000]
</code></pre>
<figure data-type="image" tabindex="33"><img src="https://stdasein.life/post-images/1600138666499.png" alt="" loading="lazy"></figure>
<pre><code class="language-python">data.drop([101679,235281], axis = 0, inplace = True)
</code></pre>
<p><strong>（2）使用IsolationForest剔除异常值</strong></p>
<p>IsolationForest是适用于连续数据的无监督异常检测方法，该算法会将数据只占很少量、数据特征值和正常数据差别很大的值视为异常值。</p>
<pre><code class="language-python">data.shape
</code></pre>
<pre><code class="language-python">(260697, 108)
</code></pre>
<pre><code class="language-python">#建立算法模型：
from sklearn.ensemble import IsolationForest
iso = IsolationForest()
#剔除异常值：mask表示不含有异常值的行
yhat = iso.fit_predict(data[num_names])
mask = yhat != -1
data_iso = data.values[mask, :]
data_iso = pd.DataFrame(data_iso,columns = data.columns)
#转换数据类型
data_iso[num_names] = data_iso[num_names].astype('int')
data_iso.shape
</code></pre>
<pre><code class="language-python">(254811, 108)
</code></pre>
<p>可见，算法剔除了5,886个样本。让我们来看看剔除部分异常值后的效果：</p>
<pre><code class="language-python">data_iso.describe().sort_values(by = 'std',axis = 1,ascending = False)
</code></pre>
<figure data-type="image" tabindex="34"><img src="https://stdasein.life/post-images/1600138737916.png" alt="" loading="lazy"></figure>
<p>剔除了部分异常值后，数据的离散程度有所下降，但相对而言还是比较高，这可能是由贫富差距导致的，反映了现实的状况。</p>
<h4 id="3过滤冗余特征">3.过滤冗余特征</h4>
<p>冗余特征可以分为三类：</p>
<ul>
<li>与预测无关的特征</li>
<li>无区分度的特征</li>
<li>信息重复的特征</li>
</ul>
<p>（1）与预测无关的特征</p>
<p>没有实际意义：id; zip_code地址邮编；addr_state申请地址；url:网站链接; emp_title职位名称（在数据探索阶段进行了分析）；next_pymnt_d；last_pymnt_d；issue_d；earliest_cr_line；last_credit_pull_d</p>
<p>信息泄露：collection_recovery_fee; recoveries</p>
<p>（2）无区分度的特征</p>
<pre><code class="language-python">data_iso.nunique()
nuniq[nuniq == 1]
</code></pre>
<pre><code class="language-python">policy_code    1
</code></pre>
<p>policy_code的值全为1，对预测没有影响，可以删去</p>
<p>（3）信息重复的特征</p>
<p>title： title与purpose的信息重复</p>
<p>sub_grade：与Grade的信息重复</p>
<p>通过drop将上述筛选出来的冗余特征删除：</p>
<pre><code class="language-python">drop_features = ['emp_title','id','policy_code','zip_code','addr_state','url',
                 'next_pymnt_d','last_pymnt_d','collection_recovery_fee',
                 'last_pymnt_amnt','issue_d','title','sub_grade','last_credit_pull_d',
                 'earliest_cr_line']
data_iso.drop(drop_features,axis=1,inplace = True)
</code></pre>
<h3 id="七-特征工程">七、特征工程</h3>
<blockquote>
<p>什么是特征工程呢？一个非常简单的例子，现在出一非常简答的二分类问题题，请你使用逻辑回归，设计一个身材分类器。输入数据X:身高和体重 ，标签为Y:身材等级（胖，不胖）。显然，不能单纯的根据体重来判断一个人胖不胖，姚明很重，他胖吗？显然不是。针对这个问题，一个非常经典的特征工程是，**BMI指数，BMI=体重/(身高^2)。这样，通过BMI指数，**就能非常显然地帮助我们，刻画一个人身材如何。<strong>甚至，你可以抛弃原始的体重和身高数据。所以说，特征工程就是</strong>通过X，创造新的X'。<strong>基本的操作包括:衍生（升维），筛选（降维）</strong></p>
</blockquote>
<figure data-type="image" tabindex="35"><img src="https://stdasein.life/post-images/1600138783381.png" alt="" width="500" height="300" loading="lazy"></figure>
<h4 id="1特征衍生">1.特征衍生</h4>
<p>特征衍生就是通过现有特征来构建新特征，以提升机器学习的准确度。</p>
<p>根据原有特征，我们可以尝试构建以下新特征：</p>
<ul>
<li>
<p>fico信用评分均值：数据集给出了fico信用评分的上下限，我们可以以此构建fico评分的均值并删除原来的特征。</p>
</li>
<li>
<p>构建信用额度使用率：通过不同账户的信用余额/信用额度，可以获得每个账户的信用额度使用率，该特征可以衡量客户的资金使用情况。</p>
</li>
<li>
<p>构建总借款账户数量：将不同借款账户数量简单相加。</p>
</li>
</ul>
<pre><code class="language-python">#fico评分均值
data_iso['fico_avg'] = (data_iso['fico_range_low']+data_iso['fico_range_high'])/2
#用户分期账户信用额度使用率
data_iso['installment_ratio'] =  data_iso['total_bal_il']/ data_iso['total_il_high_credit_limit']
#循环贷款信用额度使用率
data_iso['credit_revolving_ratio'] = data_iso['revol_bal']/ data_iso['total_rev_hi_lim']
#总信用额度使用率
data_iso['total_ratio'] =  data_iso['total_bal_ex_mort']/ data_iso['tot_hi_cred_lim']
#借款账户数 = 抵押贷款账户数+分期付款账户数+循环账户数
data_iso['num_accounts'] = data_iso['mort_acc'] + data_iso['num_il_tl'] + data_iso['num_rev_accts']
</code></pre>
<h4 id="2特征规整">2.特征规整</h4>
<figure data-type="image" tabindex="36"><img src="https://stdasein.life/post-images/1600138826745.png" alt="" width="500" height="300" loading="lazy"></figure>
<p><strong>（1）数值型特征规整</strong></p>
<p><strong>特征缩放</strong></p>
<blockquote>
<p>在运用一些机器学习算法的时候不可避免地要对数据进行特征缩放（feature scaling），比如：在随机梯度下降（stochastic gradient descent）算法中，特征缩放有时能提高算法的收敛速度。特征缩放还可以使机器学习算法工作的更好。比如在K近邻算法中，分类器主要是计算两点之间的欧几里得距离，如果一个特征比其它的特征有更大的范围值，那么距离将会被这个特征值所主导。</p>
</blockquote>
<p>数据整理、筛选：</p>
<pre><code class="language-python">#将'loan_status'转换为0和1的形式，不存在违约行为（Current、Fully Paid）用0表示，其余用1表示
map_loan_status = {'Current':0,'Fully Paid':0,'In Grace Period':1,'Late (31-120 days)':1,'Late (16-30 days)':1,'Charged Off':1}
data_iso['loan_status']= data_iso['loan_status'].map(map_loan_status)
data_iso['loan_status'] = data_iso['loan_status'].astype('object')
#筛选数值型特征
num_features = data_iso.select_dtypes('number')
num_names = num_features.columns
#因为构建的新特征可能重新引入无穷值和缺失值，所以要再次进行处理
data_iso.replace([np.inf, -np.inf], np.nan, inplace=True)
data_iso.fillna(0, inplace=True)
</code></pre>
<p>使用sklearn工具进行缩放：</p>
<pre><code class="language-python">#引入标准化工具并进行标准化
from sklearn.preprocessing import MinMaxScaler
#创建对象，限定范围（1，2）
scaler = MinMaxScaler(feature_range=(1, 2))
data_iso[num_names] = scaler.fit_transform(data_iso[num_names])
data_iso[num_names].head()
</code></pre>
<figure data-type="image" tabindex="37"><img src="https://stdasein.life/post-images/1600138900422.png" alt="" loading="lazy"></figure>
<p>缩放后，数值的大小被控制在1到2之间。</p>
<p><strong>（2）类别型特征规整</strong></p>
<pre><code class="language-python">cat_features = data_iso.select_dtypes('object')
cat_names = cat_features.columns
cat_names
</code></pre>
<pre><code class="language-python">Index(['term','grade','emp_length','home_ownership', 'verification_status', 'pymnt_plan',
       'purpose', 'initial_list_status', 'application_type', 'hardship_flag',
       'disbursement_method', 'debt_settlement_flag'],
      dtype='object')
</code></pre>
<p><strong>有序变量</strong></p>
<p>数据特征中存在一些顺序变量(ordinal variable),它们不同于一般的类型变量（categorical variable），顺序变量之间存在固有的顺序 比如 (低, 中, 高)。</p>
<ul>
<li><strong>grade</strong>评级 (信用风险:A&lt;B&lt;C&lt;D&lt;E&lt;F&lt;G)</li>
<li><strong>emp_length</strong>工作年限</li>
</ul>
<p>对有序变量，我们可以采用手动编码来体现顺序关系：</p>
<pre><code class="language-python">#对grade进行编码
grade_dict = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'Unknown':8}
data_iso['grade'] = data_iso['grade'].map(grade_dict)
</code></pre>
<pre><code class="language-python">#对emp_length进行编码
emp_length_dict = {&quot;10+ years&quot;: 10,
                    &quot;9 years&quot;: 9,
                    &quot;8 years&quot;: 8,
                    &quot;7 years&quot;: 7,
                    &quot;6 years&quot;: 6,
                    &quot;5 years&quot;: 5,
                    &quot;4 years&quot;: 4,
                    &quot;3 years&quot;: 3,
                    &quot;2 years&quot;: 2,
                    &quot;1 year&quot;: 1,
                    &quot;&lt; 1 year&quot;: 0,
                    &quot;Unknown&quot;: 0
                  }
data_iso['emp_length'] = data_iso['emp_length'].map(emp_length_dict)
</code></pre>
<pre><code class="language-python">data_iso[['grade','emp_length']]
</code></pre>
<figure data-type="image" tabindex="38"><img src="https://stdasein.life/post-images/1600138946607.png" alt="" loading="lazy"></figure>
<p>编码后，特征值变为有顺序的数值。</p>
<p><strong>无序变量</strong></p>
<p>对于无序变量，我们可以使用pandas自带的get_dummies来进行独热编码。所谓独热编码，指的是用0和1来表示一个特征值，例如，颜色特征里面有两个特征值（蓝和绿），进行独热编码后，蓝就表示为（1，0），而绿就是（0，1），具体使用见<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html">官方文档</a></p>
<pre><code class="language-python">#用get_dummies对剩下的类别型特征进行独热编码
data_iso = pd.get_dummies(data_iso)
data_iso.head()
</code></pre>
<figure data-type="image" tabindex="39"><img src="https://stdasein.life/post-images/1600139004670.png" alt="" loading="lazy"></figure>
<p>截取了部分特征转换后的样子，可以看见，application_type被扩展成了3个特征。</p>
<h4 id="3特征选择">3.特征选择</h4>
<blockquote>
<p>通过特征选择减少特征具有重要的现实意义，不仅减少过拟合、减少特征数量（降维）、提高模型泛化能力，而且还可以使模型获得更好的解释性，增强对特征和特征值之间的理解，加快模型的训练速度，一般的，还会获得更好的性能。</p>
</blockquote>
<figure data-type="image" tabindex="40"><img src="https://stdasein.life/post-images/1600139052155.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>特征选择的方法主要有三种：过滤法、嵌入法、包装法</p>
<ul>
<li>过滤法：完全独立于任何机器学习算法。它是根据各种<strong>统计检验中的分数以及相关性的各项指标</strong>来选择特征，适合在<strong>数据量很大</strong>的时候使用。</li>
<li>嵌入法：相比于过滤法**，嵌入法的结果会更加精确到模型的效用本身，对于提高模型效力有更好的效果**。并且，由于考虑特征对模型的贡献，因此无关的特征（需要相关性过滤的特征）和无区分度的特征（需要方差过滤的特征）都会因为缺乏对模型的贡献而被删除掉，可谓是<strong>过滤法的进化版</strong>，因此可以完全不过滤，直接使用嵌入法。</li>
<li>包装法：区别于过滤法和嵌入法的一次训练解决所有问题，包装法要<strong>使用特征子集进行多次训练</strong>，因此它所需要的<strong>计算成本是最高</strong>的。</li>
</ul>
<p>考虑到数据量比较大和算力有限，<strong>嵌入法</strong>结合<strong>过滤法</strong>是比较合适的选择。</p>
<p><strong>（1）嵌入法</strong></p>
<pre><code class="language-python">#分离特征和预测标签
X = data_iso.drop(['loan_status'],axis = 1)
y = data_iso['loan_status']
</code></pre>
<p><strong>找到阈值（阈值决定要保留多少特征，阈值越高，保留的特征越少）</strong></p>
<pre><code class="language-python">#通过学习曲线探索阈值
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import RandomForestClassifier as RFC
from sklearn.model_selection import cross_val_score

RFC_ = RFC(n_estimators = 10,random_state = 42) 

threshold = np.linspace(0,(RFC_.fit(X,y).feature_importances_).max(),20)

score = []
for i in threshold:
    X_embedded = SelectFromModel(RFC_,threshold=i).fit_transform(X,y)
    once = cross_val_score(RFC_,X_embedded,y,cv=5).mean()
    score.append(once)
plt.plot(threshold,score)
plt.show()
</code></pre>
<figure data-type="image" tabindex="41"><img src="https://stdasein.life/post-images/1600139113112.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>学习曲线显示，当阈值在0-0.02附近时，模型的评分最高，我们可以进一步细化学习曲线找到具体的值：</p>
<pre><code class="language-python">#细化学习曲线
score2 = []
for i in np.linspace(0,0.02,20):
    X_embedded = SelectFromModel(RFC_, threshold=i).fit_transform(X,y)
    once = cross_val_score(RFC_, X_embedded, y, cv=5).mean()
    score2.append(once)
plt.figure(figsize=[20,5])
plt.plot(np.linspace(0,0.02,20),score2)
plt.xticks(np.linspace(0,0.02,20))
plt.show()
</code></pre>
<figure data-type="image" tabindex="42"><img src="https://stdasein.life/post-images/1600139155961.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>可见，当阈值约为0.0043时，模型评分最高。</p>
<p><strong>特征选择</strong></p>
<pre><code class="language-python">sfm = SelectFromModel(RFC_,threshold=0.0043)
X_em = sfm.fit(X,y)
#get_support()返回被选择的特征
features_keeped = X.columns[X_em.get_support()]
X = X[features]
X.shape
</code></pre>
<pre><code class="language-python">(254723, 18)
</code></pre>
<p>经过嵌入法的筛选，特征值只剩下最重要的18个。</p>
<p><strong>查看特征重要性排序</strong></p>
<p>识别特征重要性对业务有指导作用，重要性越高，说明特征对业务目标的影响越大，意味着在决策的时候应予以更多的考虑。</p>
<pre><code class="language-python">RFC_.fit(X,y)
importances = RFC_.feature_importances_
names = X.columns

#返回按importances的值从大到小的排序，[::-1]表示倒序
indices = np.argsort(importances)[::-1]
#可视化
fig = plt.figure()
plt.title('Feature importances')
plt.bar(range(X.shape[1]), importances[indices])
plt.xticks(range(X.shape[1]), names[indices],rotation='vertical',fontsize=14)
plt.xlim([-1, X.shape[1]])
plt.show()
</code></pre>
<figure data-type="image" tabindex="43"><img src="https://stdasein.life/post-images/1600139217762.png" alt="" width="500" height="300" loading="lazy"></figure>
<p>按重要性排序前5的特征分别是：</p>
<ul>
<li>
<p>last_fico_range_low</p>
</li>
<li>
<p>last_fico_avg</p>
</li>
<li>
<p>last_fico_range_high</p>
</li>
<li>
<p>last_pymnt_amnt</p>
</li>
<li>
<p>out_prncp</p>
</li>
</ul>
<p>其中，last_fico_avg是根据last_fico_range_high和last_fico_range_low计算出来的均值，说明特征衍生是有效果的，但同时也可能造成冗余（特征之间高度相关，即共线性），因此，我们可以继续使用过滤法消除这种冗余。</p>
<p><strong>（2）过滤法</strong></p>
<p>使用pearson相关性分析，找出并剔除冗余特征：</p>
<pre><code class="language-python">corr = X.corr()
colormap = plt.cm.plasma
plt.figure(figsize=(15,15))
plt.title('Pearson Correlation', y=1.05, size=15)
sns.heatmap(corr,linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)
</code></pre>
<figure data-type="image" tabindex="44"><img src="https://stdasein.life/post-images/1600139260602.png" alt="" width="600" height="600" loading="lazy"></figure>
<p>删除相关性在0.85以上的部分特征：</p>
<ul>
<li>loan_amnt：funded_amnt、funded_amnt_inv、installment</li>
<li>out_prncp：out_prncp_inv</li>
<li>total_pymnt：total_pymnt_inv、total_rec_prncp</li>
<li>last_fico_avg：last_fico_range_high、last_fico_range_low</li>
<li>tot_cur_bal：tot_hi_cred_lim</li>
</ul>
<pre><code class="language-python">drop_list = ['funded_amnt','funded_amnt_inv','installment',
             'out_prncp_inv','total_pymnt_inv',
             'total_rec_prncp','last_fico_range_high',
             'last_fico_range_low']
X = X.drop(drop_list,axis = 1)
X.shape
</code></pre>
<pre><code class="language-python">(254723, 10)
</code></pre>
<p>经过过滤，特征由18个下降为10个。</p>
<pre><code class="language-python">X.columns
</code></pre>
<pre><code class="language-python">Index(['loan_amnt', 'out_prncp', 'total_pymnt', 'total_rec_int',
       'total_rec_late_fee', 'last_pymnt_amnt', 'fico_avg', 'last_fico_avg',
       'debt_settlement_flag_N', 'debt_settlement_flag_Y'],
      dtype='object')
</code></pre>
<h3 id="八-模型训练">八、模型训练</h3>
<figure data-type="image" tabindex="45"><img src="https://stdasein.life/post-images/1600139294054.png" alt="" width="400" height="300" loading="lazy"></figure>
<h4 id="1处理样本不均衡">1.处理样本不均衡</h4>
<blockquote>
<p>周志华《机器学习》中介绍到，分类学习方法都有一个共同的基本假设，即<strong>不同类别的训练样例数目相当</strong>。如果不同类别的训练样例数目稍有差别，对学习结果的影响通常也不大，但若样本类别数目差别很大，属于极端不均衡，则会对学习过程（模型训练）造成困扰。这些学习算法的设计背后隐含的优化目标是数据集上的分类准确度，而这会导致学习算法在不平衡数据上更偏向于含更多样本的多数类。</p>
</blockquote>
<p><strong>查看不同类别的样本数目</strong></p>
<pre><code class="language-python">from collections import Counter
counter = Counter(y)
print(counter)
</code></pre>
<pre><code class="language-python">Counter({0: 220384, 1: 32107})
</code></pre>
<p>违约样本数量为32,107，大约占总样本的1/8，样本分布不均衡。</p>
<p><strong>SMOTE 和 RandomUnderSampler</strong></p>
<ul>
<li>
<p>SMOTE是一种<strong>过采样</strong>方法：通过增加少数类别样本数目来达到样本均衡的效果</p>
</li>
<li>
<p>RandomUnderSampler一种<strong>欠采样</strong>方法：通过减少多数类别样本的数目达到样本均衡</p>
</li>
</ul>
<p>两种方法一起使用可以有效处理样本不均衡的情况，从而提高预测的准确度。</p>
<pre><code class="language-python">from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline

#用SMOTE提升少数类别样本数目，使之达到多数样本数目的30%
over = SMOTE(sampling_strategy=0.3)
#用RandomUnderSampler降低多数类别样本数目，使之比少数样本数目多40%
under = RandomUnderSampler(sampling_strategy=0.4)
#用pineline进行整合
steps = [('o', over), ('u', under)]
pipeline = Pipeline(steps=steps)
# 转换
X_resample, y_resample = pipeline.fit_resample(X, y)
counter = Counter(y_resample)
print(counter)
</code></pre>
<pre><code class="language-python">Counter({0: 165287, 1: 66115})
</code></pre>
<p>经过均衡处理，现在的样本比例约为2.5：1</p>
<p><strong>评估均衡处理的效果</strong></p>
<pre><code class="language-python">from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from numpy import mean

model = DecisionTreeClassifier(random_state = 42)
</code></pre>
<p>定义评估函数，注意，这里使用的评分指标是<strong>roc_auc</strong>，该指标适用于评估样本失衡情况下的模型表现</p>
<pre><code class="language-python">def evaluate(data_X, data_y):
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=42)
    scores = cross_val_score(model,data_X,data_y,scoring='roc_auc',cv=cv,n_jobs=-1)
    print('Mean ROC AUC:%.3f'%(mean(scores)))
</code></pre>
<p>评估均衡处理前后的模型表现</p>
<pre><code class="language-python">evaluate(X,y)
</code></pre>
<pre><code class="language-python">Mean ROC AUC:0.934
</code></pre>
<pre><code class="language-python">evaluate(X_resample,y_resample)
</code></pre>
<pre><code class="language-python">Mean ROC AUC:0.957
</code></pre>
<p>模型评分挺高了0.023</p>
<h4 id="2模型评估">2.模型评估</h4>
<p><strong>引进常用的分类模型</strong></p>
<ul>
<li>简单线性模型：LogisticRegression</li>
<li>向量机：LinearSVC</li>
<li>最邻近算法：KNeighborsClassifier</li>
<li>决策树模型：DecisionTreeClassifier</li>
<li>聚合模型：RandomForestClassifier、AdaBoostClassifier、XGBClassifier</li>
</ul>
<pre><code class="language-python">from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from xgboost import XGBClassifier
</code></pre>
<pre><code class="language-python">def get_models():
    models = dict()
    models['LR'] = LogisticRegression()
    models['SVC'] = LinearSVC()
    models['KNC'] = KNeighborsClassifier()
    models['DTC'] = DecisionTreeClassifier()
    models['forest'] = RandomForestClassifier()
    models['ABC'] = AdaBoostClassifier()
    models['XGB'] = XGBClassifier()
    return models

models = get_models()
</code></pre>
<p><strong>模型评分</strong></p>
<pre><code class="language-python">def evaluate_model(model):
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=42)
    scores = cross_val_score(model,X_resample,y_resample,
                             scoring='roc_auc',cv=cv,n_jobs=-1)
    return scores
</code></pre>
<pre><code class="language-python">results, names = list(), list()
for name, model in models.items():
    scores = evaluate_model(model)
    results.append(scores)
    names.append(name)
    print('&gt;%s %.3f'%(name,mean(scores)))   
</code></pre>
<pre><code class="language-python">&gt;LR 0.980
&gt;SVC 0.981
&gt;KNC 0.988
&gt;DTC 0.957
&gt;forest 0.994
&gt;ABC 0.980
&gt;XGB 0.985
</code></pre>
<p>评分最高的是随机森林模型（0.994），最低的是决策树（0.957），但考虑到在特征选择阶段我们曾用随机森林模型进行筛选，样本存在偏向，所以不能简单地认为随机森林就一定会比其他模型表现好，对此，我们可以使用堆叠法综合各模型的优点。</p>
<h4 id="3堆叠法stacking">3.堆叠法（Stacking)</h4>
<blockquote>
<p>Stacking是常见的集成学习框架。一般来说，就是训练一个多层(一般是两层，本文中默认两层)的学习器结构，第一层(也叫学习层)用n个不同的分类器(或者参数不同的模型)将得到预测结果合并为新的特征集，并作为下一层分类器的输入。一个简单的示意图如下：</p>
</blockquote>
<figure data-type="image" tabindex="46"><img src="https://stdasein.life/post-images/1600139346351.jpg" alt="" loading="lazy"></figure>
<p>Stacking可以对多个单模型进行融合以提升整体性能，是在各种比赛中很常用的一种集成方法，详情参见<a href="https://blog.csdn.net/wstcjf/article/details/77989963">详解stacking过程</a></p>
<p><strong>定义Stacking模型</strong></p>
<p>Stacking模型一般为两层结构，第一层使用性能比较好的模型，例如XGB、随机森林等，第二层则一般使用简单的模型，例如Logistic,以防止过拟合。</p>
<pre><code class="language-python">from sklearn.ensemble import StackingClassifier
def get_stacking():
    level0 = list()
    level0.append(('SVC',LinearSVC()))
    level0.append(('KNC',KNeighborsClassifier()))
    level0.append(('forest',RandomForestClassifier()))
    level0.append(('ABC',AdaBoostClassifier()))
    level0.append(('XGB',XGBClassifier()))
    
    level1 = LogisticRegression()
    model = StackingClassifier(estimators = level0,final_estimator = level1, cv = 10)
    return model

model_stack = get_stacking()
</code></pre>
<p><strong>模型评估</strong></p>
<pre><code class="language-python">score = evaluate_model(model_stack)
print('&gt;stacking %.3f'%mean(score))
</code></pre>
<pre><code class="language-python">&gt;stacking 0.993
</code></pre>
<p>最后的Stacking模型评分为0.993，虽然略低于随机森林，但因为集成了多个模型的性能，所以稳定性应该要比随机森林要好。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[房价预测]]></title>
        <id>https://stdasein.life/post/fang-jie-yu-ce/</id>
        <link href="https://stdasein.life/post/fang-jie-yu-ce/">
        </link>
        <updated>2020-08-18T07:55:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="项目背景">项目背景</h1>
<p>房价预测是kaggle平台上的一个线性回归问题，要求参赛者根据房屋的属性预测房价。</p>
<h1 id="数据概况">数据概况</h1>
<p>数据来源：<a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques/overview">kaggle</a></p>
<p>数据内容：数据集含有79个特征（房子的各种属性：面积、有无游泳池、卧室数量等）以及1个标签（房价）<br>
<a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data">数据详情</a></p>
<h1 id="框架">框架</h1>
<p><img src="https://stdasein.life/post-images/1597881995249.png" alt="" width="400" height="400" loading="lazy"><br>
数据探索：对数据集进行初步观察以获得整体概念。<br>
数据清理：对数据集可能存在的缺失值和异常值进行处理。<br>
特征工程：在理解现有特征的基础上尝试构建新特征，并进行规整、选择。<br>
模型构建：构建预测模型、对模型评分并选择最优的模型进行预测。</p>
<h1 id="数据探索分析">数据探索分析</h1>
<p>本阶段的目的是回答以下问题：<br>
1、特征的数据类型是什么？<br>
2、特征都有什么特点？<br>
3、哪些特征还不能直接使用，需要做进一步的处理？</p>
<p>引进常用的库来满足数据分析和可视化的需求：</p>
<pre><code>#基本环境设置
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas_profiling as pp
#加载训练集和测试集
path1 = 'train.csv'
path2 = 'test.csv'
train_data = pd.read_csv(path1)
test_data = pd.read_csv(path2)
train_data.head()
test_data.head()
</code></pre>
<p>为了方便操作，分离特征与标签并将训练集与测试集合并：</p>
<pre><code>#分离特征和标签
X_train = train_data.drop(['SalePrice'],axis=1)
y_train = train_data['SalePrice']
#合并
X_data = X_train.append(test_data)
#id列对预测没有意义，可舍去
X_data.drop(['Id'],axis=1,inplace=True)
</code></pre>
<p>使用pandas_profiling进行数据探索，对于数据集的每一列，pandas_profiling会提供以下统计信息：<br>
1、概要：数据类型，唯一值，缺失值，内存大小<br>
2、分位数统计：最小值、最大值、中位数、Q1、Q3、最大值，值域，四分位<br>
3、描述性统计：均值、众数、标准差、绝对中位差、变异系数、峰值、偏度系数<br>
4、最频繁出现的值，直方图/柱状图<br>
5、相关性分析可视化：突出强相关的变量，Spearman, Pearson矩阵相关性色阶图</p>
<pre><code>report = pp.ProfileReport(X_data)
report
</code></pre>
<p><strong>Overview</strong><br>
Overview部分提供了数据集的整体信息：缺失值数量、重复行数和数据的类型。<br>
<img src="https://stdasein.life/post-images/1597715512282.png" alt="" loading="lazy"><br>
可见，数据集没有重复的行或列，但有13,965个缺失值需要处理，且数据主要为文本型（46）和数值型（33），这在后续分析时要我们进一步区分。</p>
<p><strong>Variables</strong><br>
variables部分会显示各特征的详细情况，例如、缺失值数量、唯一值数量、均值、标准差等。<br>
<img src="https://stdasein.life/post-images/1597715778189.png" alt="" loading="lazy"><br>
以LotArea特征为例，可知其数据类型为数值型，没有缺失值，但标准差相较于其他特征要大得多，意味着可能存在异常值。</p>
<p><strong>Correlations</strong><br>
Correlations衡量各变量之间的相关性，为特征工程提供支持。<br>
<img src="https://stdasein.life/post-images/1597716013886.png" alt="" loading="lazy"></p>
<h1 id="数据清理">数据清理</h1>
<p>错误的数据会使模型的预测发生偏差，所以在开始预测之前要先进行数据清理，处理数据中的噪音。<br>
<img src="https://stdasein.life/post-images/1597882228594.png" alt="" width="400" height="400" loading="lazy"><br>
数据清理可分为三个步骤：处理缺失值、处理异常值和处理重复值。我们在数据探索部分已经知道数据集不存在重复，所以这里只需关注前两种情况。</p>
<h2 id="缺失值处理">缺失值处理</h2>
<p>缺失值处理主要有三种方法：<br>
1、dropna：将含有缺失值的整列/行舍弃；<br>
2、fillna：用该列/行的均值、中位数或众数等填充缺失值；<br>
3、模型预测：可用knn等模型预测缺失值；<br>
模型预测方法相对来说会有更高的可靠性，但由于本数据集的数据缺失大部分都有单一且明确的原因，所以用fillna的方法会更加方便灵活。</p>
<pre><code>#查看缺失值占比
def CountNull(data):
    null_count = data.isnull().sum().sort_values(ascending = False)
    ratio = null_count/len(data)
    nulldata = pd.concat([null_count,ratio],axis = 1, keys=['count','ratio'])
    return nulldata[ratio&gt;0]

CountNull(X_data)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597883278080.png" alt="" width="200" loading="lazy"><br>
<img src="https://stdasein.life/post-images/1597883294548.png" alt="" width="200" loading="lazy"></p>
<p>根据官方提供的data_description文本，有些特征出现缺失值是因为房子没有该特征（例如有的房子没有游泳池），对于这一类可以选择填入None，如果是数值类型的就填入0；除此之外，对于缺失值比较少的特征（缺失值仅有1或2个），可以直接填充众数。</p>
<pre><code>#选择缺失值数量为1或2的特征
feature_fill_mode = CountNull(X_data)[(CountNull(X_data)['count'] == 1) | (CountNull(X_data)['count'] == 2)].index
#因为同一个社区的LotFrontage（街道到房屋的距离）应该比较接近，所以填充同社区的中位数
feature_fill_neig = ['LotFrontage']
#选择要填入none的特征
feature_fill_none = ['MasVnrType','BsmtFinType1','BsmtFinType2','BsmtQual','BsmtExposure','BsmtCond',
                    'GarageType','GarageFinish','GarageQual','GarageCond','FireplaceQu','Fence','Alley',
                    'MiscFeature','PoolQC','MSZoning']
#选择要填入0的特征
feature_fill_zero = ['MasVnrArea','GarageYrBlt']
</code></pre>
<p>对特征的缺失值进行填充：</p>
<pre><code>for col in feature_fill_mode:
X_data[col].fillna(X_data[col].mode()[0], inplace=True)

for col in feature_fill_none:
    X_data[col].fillna('None',inplace=True)

for col in feature_fill_zero:
    X_data[col].fillna(0,inplace=True)
    
X_data['LotFrontage'] = X_data.groupby(&quot;Neighborhood&quot;)['LotFrontage'].transform(lambda x: x.fillna(x.median()))    
CountNull(X_data)
</code></pre>
<p>所有缺失值均已填充完毕。</p>
<h2 id="异常值处理">异常值处理</h2>
<p>（1）观察法<br>
所谓观察法，就是通过描述性统计分析和可视化来寻找可能存在的异常值。</p>
<pre><code>#筛选数值型特征
num_features = X_data.select_dtypes('number')
num_names = num_features.columns
des = X_data[num_names].describe()
#按特征的标准差排序
des.sort_values(by = 'std',ascending = False, axis = 1)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597627987467.png" alt="" loading="lazy"><br>
可见，LotArea的标准差要远大于其他特征，且极差也非常大，应进一步研究是否存在异常值。</p>
<pre><code>ax = sns.scatterplot(x=&quot;LotArea&quot;, y=&quot;SalePrice&quot;, data=train_data)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://stdasein.life/post-images/1597628238676.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#用中位数替换异常值
X_data.loc[X_data['LotArea']&gt;150000,['LotArea']]=9453
</code></pre>
<p>（2）使用IsolationForest剔除异常值<br>
IsolationForest是适用于连续数据的无监督异常检测方法，该算法会将数据只占很少量、数据特征值和正常数据差别很大的值视为异常值。</p>
<pre><code>#因为只需剔除训练集的异常值，所以暂时将训练、测试集分离
X_train = X_data.iloc[:1460,:]
X_test = X_data.iloc[1460:,:]
X_train.shape
(1460, 79)

#建立算法模型：
from sklearn.ensemble import IsolationForest
iso = IsolationForest()
#剔除异常值：算法将-1表示为异常值，所以mask表示不含有异常值的行
yhat = iso.fit_predict(X_train[num_names])
mask = yhat != -1
X_train, y_train = X_train.values[mask, :], y_train.values[mask]
X_train = pd.DataFrame(X_train,columns = X_data.columns)
X_train.shape
(1380, 79)
</code></pre>
<p>算法剔除了80行包含有异常值的数据。</p>
<pre><code>#将训练集和测试集合并
X_data_removed = pd.concat([X_train,X_test],axis = 0)
X_data_removed[num_names] = X_data_removed[num_names].astype(int)
X_data_removed.reset_index(drop=True, inplace=True)
</code></pre>
<h1 id="特征工程">特征工程</h1>
<p>特征工程是机器学习的核心环节，好的特征工程可以有效提高预测的精度，其主要步骤如下图所示：<br>
<img src="https://stdasein.life/post-images/1597820518048.png" alt="" width="400" loading="lazy"></p>
<h2 id="特征类型">特征类型</h2>
<p>因为不同的数据类型有不同的处理方式，所以第一步是识别各特征的数据类型：<br>
1、数值型：连续、离散<br>
2、类别型</p>
<pre><code>#筛选全部数值型特征
numeric_feature = X_data_removed.select_dtypes('number')
numeric_names = numeric_feature.columns
numeric_name
</code></pre>
<p><img src="https://stdasein.life/post-images/1597822957068.png" alt="" width="400" loading="lazy"><br>
根据特征的说明文档，MSSubClass（房屋类型）、OverallQual（房屋质量评分）、OverallCond（房屋环境评分）应划分为类别型特征：</p>
<pre><code>X_data_removed[['MSSubClass','OverallQual','OverallCond']] = X_data_removed[['MSSubClass', 'OverallQual','OverallCond']].astype(str)
</code></pre>
<h2 id="特征构建">特征构建</h2>
<p>我们可以利用原有的特征构建新特征：</p>
<pre><code>#构建房屋总面积
X_data_removed['TotalHouseArea'] = X_data_removed['TotalBsmtSF'] + X_data_removed['1stFlrSF'] + X_data_removed['2ndFlrSF']
#构建房屋翻修年限
X_data_removed['YearsSinceRemodel'] = X_data_removed['YrSold'] - X_data_removed['YearRemodAdd']
#构建房屋建造年限
X_data_removed['YrBlt'] = X_data_removed['YrSold'] - X_data_removed['YearBuilt'] 
#构建总浴室数量
X_data_removed['Total_Bathrooms'] = (X_data_removed['FullBath'] + (0.5 * X_data_removed['HalfBath']) +
                            X_data_removed['BsmtFullBath'] + (0.5 * X_data_removed['BsmtHalfBath']))
#构建门廊总面积
X_data_removed['Total_porch_sf'] = (X_data_removed['OpenPorchSF'] + X_data_removed['3SsnPorch'] +
                            X_data_removed['EnclosedPorch'] + X_data_removed['ScreenPorch'] +
                            X_data_removed['WoodDeckSF'])
</code></pre>
<h2 id="特征规整">特征规整</h2>
<p>1、标准化<br>
标准化使不同维度上的特征在数值上更具可比性，能够提升模型的精度。<br>
这里只对数值型数据进行标准化处理：</p>
<pre><code>#筛选数值型数据
num = X_data_removed.select_dtypes('number')
num_names = num.columns
#引入标准化工具并进行标准化
from sklearn.preprocessing import MinMaxScaler
#创建对象，限定范围（1，2）
scaler = MinMaxScaler(feature_range=(1, 2))
X_data_removed[num_names] = scaler.fit_transform(X_data_removed[num_names])
X_data_removed[numeric_names].head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597991752718.png" alt="" width="500" loading="lazy"><br>
标准化后，数值的大小被控制在1到2之间。</p>
<p>2、非正态分布转换<br>
正态分布的数据能更好地提高模型的准确度，因此我们要对非正态分布的数据进行转换。</p>
<pre><code>from scipy.stats import norm, skew    
from scipy import stats,special

#查看特征值的偏度分布
def sKewNess(data):
    skewed = data.apply(lambda x:skew(x)).sort_values(ascending=False)
    skewness = pd.DataFrame({'skew':skewed})
    return skewness[skewness['skew'].abs()&gt;0.75]

sKewNess(X_data_removed[num_names])
</code></pre>
<p><img src="https://stdasein.life/post-images/1597649891150.png" alt="" width="300" loading="lazy"><br>
可见，很多特征都不是正态分布的，我们可以尝试用box-cox对特征进行转换：</p>
<pre><code>#引用sklearn的PowerTransformer工具
from sklearn.preprocessing import PowerTransformer
#box-cox方法只对正数生效，因而要配合上面的MinMaxScaler使用
power = PowerTransformer(method='box-cox')
X_data_removed[numeric_names] = power.fit_transform(X_data_removed[numeric_names])
    
sKewNess((X_data_removed[num_names]))
</code></pre>
<p><img src="https://stdasein.life/post-images/1597842618747.png" alt="" width="300" loading="lazy"><br>
得到了一定的改善，但部分数据因为自身的种种局限性仍保持较大的偏度。</p>
<pre><code>#查看标签偏度
sns.distplot(y_train)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597651434520.png" alt="" width="400" loading="lazy"><br>
显然，房价不是正态分布。</p>
<pre><code>#对房价进行正态分布转换
y_train = np.log1p(y_train)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://stdasein.life/post-images/1597651550033.png" alt="" width="400" loading="lazy"></figure>
<p>3、编码与哑变量<br>
许多算法模型只支持数值型的数据，因此我们需要把类别型数据转换成数值形式。<br>
<img src="https://stdasein.life/post-images/1597992239924.png" alt="" width="400" loading="lazy"><br>
类别型数据又可以细分为两种类型：无序型（例如性别：男、女两个变量是独立的，没有顺序关系）和有序型（例如质量评分：1分和2分有顺序关系）</p>
<pre><code>#筛选类别型数据
X_data_removed[['OverallQual','OverallCond']] = X_data_removed[['OverallQual','OverallCond']].astype(int)
cat_feature = X_data_removed.select_dtypes('object')
cat_names = cat_feature.columns
cat_names
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://stdasein.life/post-images/1597910706940.png" alt="" width="500" loading="lazy"></figure>
<pre><code>#区分有序、无序数据
ordinal_feature= ['ExterQual','ExterCond','BsmtQual','BsmtCond','HeatingQC',
                'FireplaceQu','GarageQual','GarageCond','PoolQC']
nominal_feature = [i for i in cat_names if i not in ordinal_feature]
</code></pre>
<p>诸如ExterQual（对外部环境的评分：poor、good、excellent）等特征都可归为有序特征，剩下的即为无序特征。</p>
<pre><code>#排序
rank_dict = {'None':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}
for i in ordinal_feature:
    X_data_removed[i] = X_data_removed[i].map(rank_dict)
X_data_removed[ordinal_feature].head()
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://stdasein.life/post-images/1597911169498.png" alt="" width="500" loading="lazy"></figure>
<pre><code>#用get_dummies函数将剩下的非数值型特征转化为哑变量
X_data_removed = pd.get_dummies(X_data_removed)
X_data_removed.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597911297096.png" alt="" width="500" loading="lazy"><br>
上图只截取了SaleCondition生成的部分哑变量样本。</p>
<pre><code>X_data_removed.shape
(2832, 283)
</code></pre>
<p>可见，使用get_dummies生成哑变量后，维度由79增长到了283，维度越高模型越容易过拟合。</p>
<h2 id="特征选择">特征选择</h2>
<p>特征数量过多可能导致模型过拟合，因此我们可以筛选出最重要的特征以降低特征维度，从而提升模型精度。<br>
<img src="https://stdasein.life/post-images/1597992410626.png" alt="" width="400" loading="lazy"><br>
特征选择的方法有：相关系数法、互信息法、PCA主成分分析和递归特征消除法等，这里我们仅选择前两种进行分析。</p>
<p>定义评分函数<br>
定义评分函数方便我们比较不同选择方法的效果：</p>
<pre><code>#环境设置
from sklearn.model_selection import RepeatedKFold
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
from numpy import mean

#分离训练集、测试集
X_train = X_data_removed.iloc[:len(y_train),:]
X_test = X_data_removed.iloc[len(y_train):,:]

#定义评分函数
model = RandomForestRegressor(random_state = 42)
def evaluate(X_train,y_train):
    cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=42)
    scores = cross_val_score(model, X_train, y_train, scoring='neg_mean_squared_error', 
                        cv=cv, n_jobs=-1, error_score='raise')
    return mean(scores)

#进行特征选择前的基本模型评分
evaluate(X_train, y_train)
-0.017256
</code></pre>
<p>定义特征选择函数<br>
相关系数法和互信息法都可以通过SelectKBest实现，因此我们可以定义函数方便转换：</p>
<pre><code>from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression
from sklearn.feature_selection import mutual_info_regression

def select_features(X_train, y_train, X_test,func,k):
    # k:283个特征中选取k个,score_func:调用的方法
    fs = SelectKBest(score_func=func, k=k)
    fs.fit(X_train, y_train)
    # 转换训练集
    X_train_fs = fs.transform(X_train)
    # 转换测试集
    X_test_fs = fs.transform(X_test)
    return X_train_fs, X_test_fs, fs
</code></pre>
<p>（1）相关系数法</p>
<pre><code>#填入f_regression来调用相关系数法
X_train_fsc, X_test_fsc, fsc = select_features(X_train, y_train, X_test,f_regression,280)
evaluate(X_train_fsc, y_train)
-0.017265
</code></pre>
<p>相较于选择前的 -0.017256，评分略有下降。</p>
<p>（2）互信息法</p>
<pre><code>X_train_fsm, X_test_fsm, fsm = select_features(X_train, y_train, X_test,mutual_info_regression,280)
evaluate(X_train_fsm, y_train)
-0.017217
</code></pre>
<p>评分上升了，我们可以用GridSearchCV继续寻找最优的特征数量：</p>
<pre><code>from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=42)
model = RandomForestRegressor()
fs = SelectKBest(score_func=mutual_info_regression)
pipeline = Pipeline(steps=[('sel',fs), ('rf', model)])
grid = dict()
#sel表示SelectKBest，__k表示SelectKBest的参数k；特征选取范围（253-283）
grid['sel__k'] = [i for i in range(X_train.shape[1]-30, X_train.shape[1]+1)]
# 定义GridSearchCV
search = GridSearchCV(pipeline, grid, scoring='neg_mean_squared_error', n_jobs=-1, cv=cv)
# 运行GridSearchCV
results = search.fit(X_train, y_train)
print('Best MSE: %.3f' % results.best_score_)
print('Best Config: %s' % results.best_params_)
Best MSE: -0.017
Best Config: {'sel__k': 282}
</code></pre>
<p>可见，选取282个特征时评分最高，但维度仍然较高，接下来尝试一下PCA法。</p>
<p>（3）PCA（主成分分析）</p>
<pre><code>from sklearn.decomposition import PCA
#指定降维后的主成分方差和比例为99%
pca_model = PCA(n_components = 0.99)
X_train_de = pca_model.fit_transform(X_train)
X_test_de = pca_model.transform(X_test)
X_train_de.shape
(1383, 124)

evaluate(X_train_de,y_train)
-0.017633
</code></pre>
<p>PCA法保留了124个特征，但评分并不好。</p>
<p>最终，我们选择评分较好的互信息法的282个特征用于预测：</p>
<pre><code>X_train_mb,X_test_mb,fs_mb =select_features(X_train, y_train, X_test,mutual_info_regression,282)
</code></pre>
<h1 id="模型构建">模型构建</h1>
<pre><code>from numpy import mean, std
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.kernel_ridge import KernelRidge
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor
from sklearn.model_selection import GridSearchCV,cross_val_score,StratifiedKFold
from sklearn.model_selection import RepeatedKFold
from sklearn.ensemble import StackingRegressor
</code></pre>
<p>使用堆叠法：<br>
堆叠法是一种整合多个模型为一个集成模型从而提高预测精度的方法。集成模型一般分两层，第一层会选取几个强力模型作为基本模型，如随机森林、XGboost等，第二层则会选择比较简单的模型，如linearRegressor,详情见：<br>
<a href="https://blog.csdn.net/wstcjf/article/details/77989963">详解stacking过程</a></p>
<pre><code>def get_stacking():
    # 构建基本模型
    level0 = list()
    level0.append(('lgbm', LGBMRegressor()))
    level0.append(('Forest', RandomForestRegressor()))
    level0.append(('svm', SVR()))
    level0.append(('GDB', GradientBoostingRegressor()))
    level0.append(('XGB', XGBRegressor(objective ='reg:squarederror')))
    # 构建次级模型
    level1 = KernelRidge()
    # define the stacking ensemble
    model = StackingRegressor(estimators=level0, final_estimator=level1, cv=10)
    return model
</code></pre>
<p>引进其它模型：</p>
<pre><code>def get_models():
    models = dict()
    models['knn'] = KNeighborsRegressor()
    models['cart'] = DecisionTreeRegressor()
    models['svm'] = SVR()
    models['k'] = KernelRidge()
    models['Forest'] = RandomForestRegressor()
    models['GDB'] = GradientBoostingRegressor()
    models['Extra'] = ExtraTreesRegressor()
    models['XGB'] = XGBRegressor(objective ='reg:squarederror')
    models['LGBM'] = LGBMRegressor()
    models['stacking'] = get_stacking()
    return models
</code></pre>
<p>定义评分函数：</p>
<pre><code>def evaluate_model(model):
    cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)
    scores = cross_val_score(model, X_train_mb, y_train, scoring='neg_mean_squared_error', cv=cv, n_jobs=-1, error_score='raise')
    return scores
</code></pre>
<p>模型比较：</p>
<pre><code>models = get_models()
#遍历，评估各模型性能
results, names = list(), list()
for name, model in models.items():
    scores = evaluate_model(model)
    results.append(scores)
    names.append(name)
    print('&gt;%s %.3f (%.3f)' % (name, mean(scores), std(scores)))
</code></pre>
<blockquote>
<p>knn -0.024 (0.005)<br>
cart -0.037 (0.007)<br>
svm -0.013 (0.003)<br>
k -0.017 (0.006)<br>
Forest -0.017 (0.004)<br>
GDB -0.014 (0.004)<br>
Extra -0.015 (0.004)<br>
XGB -0.014 (0.003)<br>
LGBM -0.015 (0.004)<br>
stacking -0.012 (0.003)</p>
</blockquote>
<p>集成模型的表现最优异，我们将用它作为预测模型：</p>
<pre><code>model = get_stacking()
model.fit(X_train_mb,y_train)
result = model.predict(X_test_mb)
#因为之前将房价进行了正态分布转换，现在要进行还原
result = np.expm1(result)

#导出结果
r=pd.DataFrame()
r['Id']=test_data['Id']
r['SalePrice']=result
#将预测结果导出为csv文件
r.to_csv(&quot;C:\\Users\\Steven\\Desktop\\Kaggle\\housing2.csv&quot;, index = False)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[爬虫基本流程——爬取豆瓣电影top250]]></title>
        <id>https://stdasein.life/post/pa-chong-ji-ben-liu-cheng-yi-dou-ban-dian-ying-top250-wei-li/</id>
        <link href="https://stdasein.life/post/pa-chong-ji-ben-liu-cheng-yi-dou-ban-dian-ying-top250-wei-li/">
        </link>
        <updated>2020-08-15T06:49:31.000Z</updated>
        <content type="html"><![CDATA[<p>设置环境</p>
<pre><code>import bs4
import re
import urllib.request,urllib.error
import xlwt
import sqlite3
from bs4 import BeautifulSoup
import pandas as pd


url = 'https://movie.douban.com/top250'
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'}
data = bytes(urllib.parse.urlencode({'a':'b'}),encoding = 'utf-8')
req = urllib.request.Request(url = url,headers = headers)
response = urllib.request.urlopen(req)
print(response.read().decode('utf-8'))

def asKurl(url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'}
    req = urllib.request.Request(url=url,headers=headers)
    response = urllib.request.urlopen(req)
    html =''
    html = response.read().decode('utf-8')
    return html

baseurl = 'https://movie.douban.com/top250?start='
relink = re.compile(r'&lt;a href=&quot;(.*?)&quot;&gt;')
reimage = re.compile(r'&lt;img.*src=&quot;(.*?)&quot;',re.S) #re.S让换行符包含在字符中
retitle = re.compile(r'&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;')
rerating = re.compile(r'&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;')
renum_comment = re.compile(r'&lt;span&gt;(\d*)人评价&lt;/span&gt;')
reqinq =  re.compile(r'&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;')
reinfo = re.compile('&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;',re.S)

def get_all(baseurl):
    datalist=[]
    for i in range(0,10):
        url = baseurl + str(i*25)
        html = asKurl(url)
        #逐一解析数据
        soup = BeautifulSoup(html,'html.parser')
        for item in soup.find_all('div',class_='item'):
            data = []
            item = str(item)
            link = re.findall(relink,item)[0] 
            data.append(link)
            image = re.findall(reimage,item)[0]
            data.append(image)
            titles =  re.findall(retitle,item)
            if (len(titles)==2):
                ctitle = titles[0]
                data.append(ctitle)
                ftitle = titles[1].replace('/','')
                data.append(ftitle)
            else:
                data.append(ctitle)
                data.append(' ')
            
            rating = re.findall(rerating,item)[0] 
            data.append(rating)
            
            num_comment = re.findall(renum_comment,item)[0]
            data.append(num_comment)
            
            inq = re.findall(reqinq,item)
            if (len(inq) != 0):
                inq = inq[0].replace('。','')
                data.append(inq)
            else:
                data.append(' ')
                
            info = re.findall(reinfo,item)[0]
            info = re.sub('&lt;br(\s+)?/&gt;(\s+)?',' ',info)
            info = re.sub('/',' ',info)
            data.append(info.strip())

            datalist.append(data)
            
    return datalist

datalist = get_all(baseurl)

import xlwt
def saveData(datalist, savepath):
    workbook = xlwt.Workbook(encoding = 'utf-8')
    worksheet = workbook.add_sheet('sheet1')
    cols = ['电影链接','图片链接','中文名称','英文名称','评分','评价人数','评语','其他信息']
    for i in range(0,8):
        worksheet.write(0,i,cols[i])
    for i in range(0,250):
        data = datalist[i]
        for j in range(0,8):
            worksheet.write(i+1,j,data[j])
    workbook.save(savepath)

def main():
    baseurl = 'https://movie.douban.com/top250?start='
    #1.爬取网页并解析数据
    datalist = get_all(baseurl)
    #2.保存数据
    savepath = r'C:\Users\Steven\Desktop\ipython\豆瓣电影.xls'
    saveData(datalist, savepath)

import pymysql

config = {
            'host':'127.0.0.1',
            'user':'root',
            'password':'cai19930727205',
            'database':'python_db',
            'port':3306
            }
def init_db():
    con = pymysql.connect(**config)
    cur = con.cursor()
    sql = &quot;&quot;&quot;
        create table moviestop250(
        id INT auto_increment,
        info_link VARCHAR(100),
        im_link VARCHAR(100),
        cname VARCHAR(100),
        fname VARCHAR(100),
        score FLOAT,
        rate_num INT,
        introduction TEXT,
        info TEXT,
        primary key(id)
        )
        &quot;&quot;&quot;
    cur.execute(sql)
    cur.close()
    con.close()

def saveData2DB(datalist):
    init_db()
    con = pymysql.connect(**config)
    cursor = con.cursor()
    
    for data in datalist:
        for i in range(len(data)):
            data[i] = '&quot;'+data[i]+'&quot;'
        sql =&quot;&quot;&quot;
            insert into moviestop250(info_link,im_link,cname,fname,score,rate_num,introduction,info)
            values(%s)&quot;&quot;&quot;%&quot;,&quot;.join(data)
        cursor.execute(sql)
        con.commit()
    cursor.close()
    con.close()

saveData2DB(datalist)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用户复购行为预测]]></title>
        <id>https://stdasein.life/post/dian-shang-zhi-biao-fen-xi/</id>
        <link href="https://stdasein.life/post/dian-shang-zhi-biao-fen-xi/">
        </link>
        <updated>2020-08-14T00:28:09.000Z</updated>
        <content type="html"><![CDATA[<p>目录：<br>
一、数据概况<br>
二、提出问题<br>
三、分析思路<br>
四、数据清理<br>
五、数据分析<br>
六、增长建议<br>
七、机器学习</p>
<h1 id="一-数据概况">一、数据概况</h1>
<p>数据来源：<br>
<a href="https://tianchi.aliyun.com/dataset/dataDetail?dataId=47&amp;lang=zh-cn">阿里天池</a></p>
<p>数据内容：<br>
<img src="https://stdasein.life/post-images/1597366010068.png" alt="" loading="lazy"><br>
<img src="https://stdasein.life/post-images/1597366327443.png" alt="" loading="lazy"><br>
数据集提供了“双十一”期间部分卖家及其相应<strong>新买家</strong>的数据，包括这些新买家在前半年的购物行为日志，以及基本用户信息，所以<strong>数据集提供的用户均在”双十一“期间有购买行为</strong>。</p>
<h1 id="二-提出问题">二、提出问题</h1>
<ul>
<li>
<p>用户方面：</p>
<p>网站流量状况如何，在获客方面是否存在问题？</p>
<p>新用户留存状况，用户忠诚度如何？</p>
<p>获取营收状况？放弃购买的用户在哪个环节流失？</p>
<p>怎样通过用户分层进行精细化运营？</p>
</li>
<li>
<p>商品方面：</p>
<p>哪些商品销量更高？</p>
<p>商品之间是否存在购买的关联性？</p>
</li>
<li>
<p>卖家方面：</p>
<p>成功的卖家有什么特点？是否有值得借鉴之处？</p>
</li>
</ul>
<h1 id="三-分析思路">三、分析思路</h1>
<ul>
<li>使用人货场的分析框架并结合AARRR指标体系。</li>
<li>采用多维度拆解分析方法对问题进行拆解，用假设检验分析法、对比分析法和kmeans算法具体分析用户使用流程及具体业务指标中的问题。<br>
<img src="https://stdasein.life/post-images/1598667630143.png" alt="" width="600" loading="lazy"></li>
</ul>
<h1 id="四-数据清理">四、数据清理</h1>
<p>数据清理的步骤：<br>
<img src="https://stdasein.life/post-images/1598669359967.png" alt="" width="400" loading="lazy"></p>
<h2 id="1数据加载-合并">1.数据加载、合并</h2>
<p>使用pandas载入数据集：</p>
<pre><code>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
path_user_info = 'user_info_format1.csv'
path_user_log = 'user_log_format1.csv'
user_info = pd.read_csv(path_user_info)
user_log = pd.read_csv(path_user_log)
</code></pre>
<h3 id="11-查看数据">1.1 查看数据</h3>
<p>分别查看user_info和user_log的内容：</p>
<p>（1）user_info</p>
<pre><code>#查看user_info前五条数据
user_info.head()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://stdasein.life/post-images/1597367204849.png" alt="" width="400" loading="lazy"></figure>
<ul>
<li>
<p>user_info包含了用户的基本信息：</p>
<p>user_id；</p>
<p>age_range: 1 for &lt;18; 2 for [18,24]; 3 for [25,29]; 4 for [30,34]; 5 for [35,39]; 6 for [40,49]; 7 and 8 for &gt;= 50; 0 and NULL for unknown；</p>
<p>gender: 0 for female, 1 for male, 2 and NULL for unknown;</p>
</li>
</ul>
<p>（2）user_log</p>
<pre><code>#查看user_log前五条内容
user_log.head()
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://stdasein.life/post-images/1597367359594.png" alt="" width="500" loading="lazy"></figure>
<ul>
<li>
<p>user_log是用户的行为记录：</p>
<p>item_id：商品的编号</p>
<p>cat_id：商品的种类</p>
<p>seller_id：商家的id</p>
<p>brand_id：商品的品牌</p>
<p>time_tamp：行为发生的时间（format:mmdd)</p>
<p>action_type：0表示点击，1表示加入购物车，2表示购买，3表示收藏</p>
</li>
</ul>
<h3 id="12-合并数据">1.2 合并数据</h3>
<p>为了方便分析，将user_info和user_log进行合并：</p>
<pre><code>user_full = pd.merge(user_log,user_info)
#查看数据量
user_full.shape
(54925330, 9)
</code></pre>
<h2 id="2缺失值处理">2.缺失值处理</h2>
<h3 id="21-查看缺失值分布">2.1 查看缺失值分布</h3>
<pre><code>#计算缺失值的数量
count_null = user_full.isnull().sum().sort_values(ascending=False)
#缺失值占比
ratio = count_null/len(user_full)
count_ratio = pd.concat([count_null,ratio],axis=1,keys = ['count','ratio'])
count_ratio[count_ratio.ratio&gt;0]
</code></pre>
<p><img src="https://stdasein.life/post-images/1597369373220.png" alt="" width="300" loading="lazy"><br>
可见，缺失值的占比较小，且只分布在性别、年龄和品牌三列。</p>
<h3 id="22-填充缺失值">2.2 填充缺失值</h3>
<p>因为数据集里性别未知表示为NaN或2，所以我们将缺失值统一填充为2；同理，将年龄缺失值填充为0。</p>
<pre><code>#填充年龄、性别的缺失值
user_full['age_range'].fillna(0,inplace=True)
user_full['gender'].fillna(2,inplace=True)
#对品牌的缺失值填充‘Missing'    
user_full['brand_id'].fillna('Missing',inplace=True)
user_full.isnull().sum()
user_id        0
item_id        0
cat_id         0
seller_id      0
brand_id       0
time_stamp     0
action_type    0
age_range      0
ender         0
dtype: int64
</code></pre>
<h2 id="3重复值处理">3.重复值处理</h2>
<pre><code>#选择重复的行
count_dup = user_full[user_full.duplicated()]
count_dup.count()
user_id        2498641
item_id        2498641
cat_id         2498641
seller_id      2498641
brand_id       2498641
time_stamp     2498641
action_type    2498641
age_range      2498641
gender         2498641
dtype: int64
</code></pre>
<p>查询发现，数据集有2,498,641行重复数据，这个数字非常大，不能简单的认为是数据的冗余，可能确实是用户重复操作所导致的，对此我们决定予以保留。</p>
<h2 id="4时间格式转换">4.时间格式转换</h2>
<p>将原本的时间戳转换成更直观的形式。<br>
拆分出月和日，方便后续的分析。</p>
<pre><code>#引入datetime工具库转换时间格式
import datetime as dtimport datetime 
user_full['time_stamp'] = pd.to_datetime(user_full['time_stamp'],format='%Y%m%d')
#拆分月、日
user_full['month'] = user_full['time_stamp'].dt.month.astype(str)
user_full['day'] = user_full['time_stamp'].dt.day.astype(str)
user_full['year'] = '2015'
user_full['date'] = user_full['year'] + user_full['month'] + user_full['day']
user_full['date'] = pd.to_datetime(user_full['date'],format='%Y%m%d')
user_full.drop(['time_stamp'],axis=1,inplace=True)
user_full.head()
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://stdasein.life/post-images/1597369687965.png" alt="" width="500" loading="lazy"></figure>
<h1 id="五-数据分析">五、数据分析</h1>
<p>这部分将会对数据集进行具体分析。</p>
<h2 id="1人">1.人</h2>
<p>本环节关注点是用户的行为习惯，利用AARRR的部分因素、转化率概念和kmeans模型对用户行为进行分析。</p>
<h3 id="acquisition客户获取">Acquisition：客户获取</h3>
<h4 id="指标选取">指标选取</h4>
<figure data-type="image" tabindex="4"><img src="https://stdasein.life/post-images/1597369796598.png" alt="" width="400" loading="lazy"></figure>
<ul>
<li>pv：<strong>即Page View，网站浏览量，指页面浏览的次数，用以衡量网站用户访问的网页数量</strong>。用户每次打开一个页面便记录1次PV，多次打开同一页面则浏览量累计</li>
<li>uv：<strong>即Unique Visitor，独立访客数，指一天内访问某站点的人数，以cookie为依据</strong>。1天内同一访客的多次访问只记录为一个访客。</li>
</ul>
<h4 id="指标分析">指标分析</h4>
<p>按月分组：</p>
<pre><code>group_m = user_full.groupby('month')
group_m.get_group(5).head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597369894505.png" alt="" width="500" loading="lazy"><br>
月流量对比分析：</p>
<pre><code>#创建函数计算pv,uv和pv/uv
def volumeFlow(x):
    month = group_m.get_group(x)
    uv = month['user_id'].nunique()
    pv = month[month['action_type']== 0]['action_type'].count()
    return pv,uv,pv/uv

keys = ['May','Jun','Jul','Aug','Sep','Oct','Nov']
values = []
#遍历5—11月并将数据放入列表
for i in range(5,12):
    a = volumeFlow(i)
    values.append(a)

#转化为DataFrame
dictionary = dict(zip(keys, values))
df = pd.DataFrame(dictionary,index=['pv','uv','pv/uv']).astype(int)
df.columns.name = 'Month'
df.index.name = 'indicator'
df
</code></pre>
<p><img src="https://stdasein.life/post-images/1597370169510.png" alt="" width="400" loading="lazy"><br>
可视化：</p>
<pre><code>#可视化
pv = df.iloc[0,:].values
uv = df.iloc[1,:].values
pv_uv = df.iloc[2,:].values
x = ['May','Jun','Jul','Aug','Sep','Oct','Nov']

fig,(ax1,ax2,ax3) = plt.subplots(3,1)
ax1.plot(x,pv,'o-')
ax1.set_ylabel('pv')
ax2.plot(x,uv,'.-')
ax2.set_ylabel('uv')
ax3.plot(x,pv_uv)
ax3.set_ylabel('pv/uv')
plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25, wspace=0.35)
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://stdasein.life/post-images/1597370253678.png" alt="" width="400" loading="lazy"></figure>
<h4 id="分析总结">分析总结</h4>
<p><strong>整体上看，五月到十一月的浏览量呈现出增长的趋势</strong>，增长可归因于两方面：</p>
<ul>
<li>
<p>独立访客(uv)的增加：</p>
<p>原因假设：1）新客增加；2）旧客唤醒；</p>
<p>验证思路：对用户按首次使用日期进行群组分析，区分新旧用户，计算新客的增长情况；按用户的来源渠道进行分组，筛选有效的获新/唤醒渠道。（新旧用户的分析将会在留存率环节展开所以在此不过多表述，而来源渠道分析因为资料不足无法进行，在此只提供思路。）<br>
<img src="https://stdasein.life/post-images/1597370427409.png" alt="" width="500" loading="lazy"></p>
</li>
<li>
<p>人均浏览量的增加：</p>
<p>原因假设：网页内容优化、推荐算法提升和优惠活动等</p>
</li>
</ul>
<p><strong>十一月份出现流量峰值</strong>：</p>
<p>原因假设：双十一促销的影响</p>
<p>假设检验：分析对比双十一前后流量的变化，一般而言，促销过后流量会有一定程度的回落。</p>
<p>收集证据：</p>
<pre><code>#抓取11月数据
group_nov = group_m.get_group(11)
group_nov = pd.DataFrame(group_nov)
#查看11月天数分布
group_nov.day.value_counts()
11    1921587
10     531651
9      213696
8      173739
7      156503
6      146463
5      134096
4      130784
3      108929
1      101456
2       99219
12         11
Name: day, dtype: int64
</code></pre>
<p>11月12日的数据量太小，我们将其作为异常值剔除。</p>
<pre><code>group_d = group_nov.groupby('day')

#定义函数计算每天的流量
def getDailyVolumeFlow(x):
    day = group_d.get_group(x)
    uv = day['user_id'].nunique()
    pv = day[day['action_type']== 0]['action_type'].count()
    return pv,uv,pv/uv

keys_d = list(range(1,12))
values_d = []

#将每天的流量放进列表中
for i in range(1,12):  #不包含第十二天的异常值
    a = getDailyVolumeFlow(i)
    values_d.append(a)
    
#转换为便于观察的DataFrame形式
dictionary_d = dict(zip(keys_d, values_d))
df_day = pd.DataFrame(dictionary_d,index=['pv','uv','pv/uv']).astype(int)
df_day
</code></pre>
<p><img src="https://stdasein.life/post-images/1597370986428.png" alt="" width="500" loading="lazy"><br>
结论：</p>
<ul>
<li>从统计数字可以看出，越接近双十一，网站的流量越大，而双十一当天的流量甚至比以往一个月的流量都还要大。可见，打造消费文化对消费的强大促进作用。</li>
<li>继续提问：双十一过后的流量还能保持在这个水平吗？会不会透支了用户未来的消费潜力？</li>
<li>验证思路：可通过零售中促销爆发度和促销衰减度的指标进行分析对比，如果衰减度大于爆发度则有销售透支的现象发生，如果衰减度大于两倍的爆发度，那这个促销活动就是彻底失败了。</li>
<li>受限于手头上的数据，我们无法对双十一之后的流量进行分析。</li>
</ul>
<h3 id="retention客户留存">Retention：客户留存</h3>
<h4 id="指标选取-2">指标选取</h4>
<figure data-type="image" tabindex="6"><img src="https://stdasein.life/post-images/1597371117577.png" alt="" width="500" loading="lazy"></figure>
<ul>
<li>留存率：用户在某段时间内开始使用应用，经过一段时间后，仍然继续使用该应用的用户，被认作是留存用户。这部分用户占当时新增用户的比例即是留存率，会按照每隔1单位时间（例日、周、月）来进行统计。</li>
<li>复购率：复购率就是重复购买的用户占所有存在购买行为用户的比率。</li>
<li>回购率：回购率就是在上个时间窗口有购买行为的同时在下个时间窗口仍然有购买行为的用户数量占上个窗口有购买行为用户的比例。</li>
</ul>
<h4 id="指标分析-2">指标分析</h4>
<p>考虑到电商的特殊性，我们以月为单位进行分析。</p>
<h5 id="1留存率">（1）留存率</h5>
<ul>
<li>留存率的分析思路：首先计算每个月的新增用户数量，再分析后续留存；</li>
<li>留存率=新增用户中登录用户数/新增用户数*100%；</li>
<li>新增用户数：在某个时间段新登录应用的用户数；</li>
<li>登录用户数：登录应用后至当前时间，至少登录过一次的用户数；</li>
</ul>
<p>以六月份为例，演示留存率计算过程。<br>
第一步：筛选出六月前就已经存在的用户，因为数据集的局限性，我们只能将五月份的数据视为全部的历史数据，所以五月份的用户就是计算新增用户的基准。</p>
<pre><code>#计算基准用户数
may = user_full.loc[user_full['month']==5,:]
print('五月份用户数量：%d'%may['user_id'].nunique())
五月份用户数量：40235
</code></pre>
<p>五月份的用户数量为40,235，而在六月份用户中在五月份没出现过的部分，就是新增用户。<strong>要注意的是，因为五月份没有前置数据，所以只能将五月份的所有用户都视为新增用户。</strong></p>
<p>有了基准，我们就可以计算出六月的新增用户数了。首先用loc截取六月份的全部数据，然后通过isin筛选新增用户。</p>
<pre><code>#计算六月新增用户数
june = user_full.loc[user_full['month']==6,:]
jun_new = june.loc[june['user_id'].isin(may['user_id'])==False,:]
print('六月份新增用户数量：%d'%jun_new['user_id'].nunique())
六月份新增用户数量：17402
</code></pre>
<p>六月份新增用户数量为17,402，接下来要计算的留存数量本质上就是在这个数字的基础上查看用户的留存情况，留存数量少于17,402，即出现了用户流失。</p>
<p>为了计算留存数量，我们仍然会使用isin进行筛选，不过方向相反。</p>
<pre><code>retention = []
m_list = [7,8,9,10,11]

#遍历计算六月新用户的后续留存状况
for i in m_list:
    m_next = user_full.loc[user_full['month']==i,:]
    m_re = m_next.loc[m_next['user_id'].isin(jun_new['user_id'])==True,:]
    retention.append('%d月份留存: %d'%(i,m_re['user_id'].nunique()))

#插入六月份新增用户数
retention.insert(0,'6月份新增用户：%d'%jun_new['user_id'].nunique())
retention
['6月份新增用户：17402',
'7月份留存: 11418',
'8月份留存: 10977',
'9月份留存: 12199',
'10月份留存: 13575',
'11月份留存: 17402']
</code></pre>
<p>结果显示，六月份新增用户为17,402，八月留存10,977，流失率达到最大，往后几个月逐渐回升。<br>
现在，我们会通过遍历来计算所有月份的留存状况。外层的遍历计算每个月的新增用户数，内层的遍历计算留存数。</p>
<pre><code>month = list(range(5,12))
df_re = pd.DataFrame()

#计算每月新增用户
for i in range(len(month)-1):
    #每次形成一列，放置新增用户数及以后的留存数
    count = [0]*len(month)
    target_month = user_full.loc[user_full['month']==month[i],:]
    
    #计算五月份新用户数量，因为五月份无前置月份，所以跳过筛选
    if i == 0:
        new_users = target_month
        new_users_num = new_users['user_id'].nunique()
        
    else:
        history_month = user_full.loc[user_full['month'].isin(month[:i]),:]
        new_users = target_month.loc[target_month['user_id'].isin
                                    (history_month['user_id'])==False,:]
        new_users_num = new_users['user_id'].nunique()
        
    #储存新用户数量，放在每行的第一个位置
    count[0] = new_users_num
    
    #同时遍历，j遍历月份，c遍历列表位置
    for j,c in zip(range(i + 1,len(month)),range(1,len(month))):
        next_month = user_full.loc[user_full['month']==month[j],:]
        next_users = next_month.groupby('user_id')['action_type'].sum().reset_index()
        
        #计算留存数
        re_next_users = next_users.loc[next_users['user_id'].isin
                                    (new_users['user_id'])==True,:]
        re_next_users_num = re_next_users['user_id'].nunique()
        #储存留存数
        count[c] = re_next_users_num
    
    #合并
    result = pd.DataFrame({month[i]:count}).T
    df_re = pd.concat([df_re,result])
    
df_re.columns = ['新增用户','+1月','+2月','+3月','+4月','+5月','+6月']
df_re.index.name ='月份'    
df_re
</code></pre>
<p><img src="https://stdasein.life/post-images/1597371823227.png" alt="" width="500" loading="lazy"><br>
注意：所有月份的留存率在11月都达到100%，这是因为<strong>数据集提供的用户均在”双十一“期间有购买行为</strong>。</p>
<pre><code>#单独计算11月新增用户数
month_2 = list(range(5,12))
target_month = user_full.loc[user_full['month']==month_2[6],:]
history_m_to_d = user_full.loc[user_full['month'].isin(month_2[:6]),:]
new_users = target_month.loc[target_month['user_id'].isin
                            (history_m_to_d['user_id'])==False,:]
new_users_num_nov = new_users['user_id'].nunique()
print('十一月份新增用户数量：%d'%new_users_num_nov)
十一月份新增用户数量：1582
</code></pre>
<p>6至11月份，新增用户呈现逐月递减的趋势。<br>
我们把留存数量转化为比率并进行可视化，方便对比分析。</p>
<pre><code>re_table = df_re.divide(df_re['新增用户'],axis=0)
re_ratio = re_table.drop(['新增用户'],axis=1)
re_ratio.index.name = 'month'
re_ratio.columns = ['+1m','+2m','+3m','+4m','+5m','+6m']
#生成热力图
sns.heatmap(re_ratio,annot=True, fmt=&quot;.0%&quot;)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597371920657.png" alt="" width="500" loading="lazy"><br>
分析小结：</p>
<ul>
<li>新增用户数量逐月递减：<br>
原因假设：单一获客渠道饱和；<br>
验证思路：根据获客渠道，年龄等不同属性对用户进行群组分析，分析用户成分，如果成分单一，就可能意味着饱和，应尝试开拓新的渠道。</li>
<li>7月的留存率相较于其他月份偏低，仅有59%：<br>
原因假设：网页、app改版，影响用户体验。<br>
验证思路：对流失用户进行问卷调查、AB测试</li>
<li>留存率基本保持在60%以上，高于电商行业标准的5—8%；</li>
</ul>
<h5 id="2复购率">（2）复购率</h5>
<p>复购率分析思路：筛选出具有购买行为的用户，然后通过透视图统计各用户购买次数。</p>
<pre><code>#筛选所有购买行为
user_buy = user_full[user_full['action_type']==2]
user_buy.shape
(608290, 12)
</code></pre>
<p>5至11月间共发生了608,290次购买行为。<br>
用透视表按月份统计每个用户的购买次数:</p>
<pre><code>#用透视表按月份统计每个有购买行为的用户的购买次数
pivot = user_buy.pivot_table(index = 'user_id',
                            columns = 'month',values ='action_type',
                            aggfunc='count')
pivot.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597372089677.png" alt="" width="500" loading="lazy"><br>
如上图所示，在当月没有购买行为的用户填入NaN。</p>
<pre><code>#为了方便求出复购率，对透视表进行转化
pivot = pivot.fillna(0)
pivot_tr = pivot.applymap(lambda x:1 if x&gt;1 else 0 if x == 1 else np.nan)
pivot_tr.head()
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://stdasein.life/post-images/1597372127016.png" alt="" width="500" loading="lazy"></figure>
<pre><code>#求复购率，用sum统计购买次数大于1的用户数量，用count统计所有购买用户数
ratio = pivot_tr.sum()/pivot_tr.count()
ratio
#复购率：
month
5     0.518338
6     0.540954
7     0.518946
8     0.516869
9     0.549189
10    0.565497
11    0.692119
dtype: float64

#可视化
plt.plot(ratio)
plt.xlabel('month')
plt.ylabel('repurchase rate')
plt.suptitle('monthly repurchase rate')
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://stdasein.life/post-images/1597372188346.png" alt="" width="500" loading="lazy"></figure>
<p>分析小结：</p>
<p>各月份复购率均保持在50%以上，用户忠诚度高。</p>
<p>8—11月复购率持续增长：<br>
原因假设：具有购买行为的用户数量下降，分母变小，导致复购率增加。<br>
假设检验：分析购买用户数量。<br>
收集证据：</p>
<pre><code>#查看各统计指标
pivot.describe()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597372244357.png" alt="" width="500" loading="lazy"><br>
整体上，每月具有购买行为的用户数量呈现上升趋势，其中5-10月增长比较平缓。<br>
结论：假设不成立，复购率提升不是因为用户的流失。</p>
<h5 id="3回购率">（3）回购率</h5>
<p>回购率分析思路：与复购率类似但更复杂一些，需要考虑下一个窗口期间的购买情况。</p>
<pre><code>#生成透视表，统计每月购买情况
pivot_rep = user_buy.pivot_table(index = 'user_id',columns = 'month',values = 'action_type',aggfunc = 'count',fill_value = 0)

#数据转换，将存在购买行为的情况用1表示，不存在的用0表示
pivot_rep_tr = pivot_rep.applymap(lambda x: 1 if x&gt;0 else 0)
pivot_rep_tr.head()
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://stdasein.life/post-images/1597372364000.png" alt="" width="400" loading="lazy"></figure>
<pre><code>#定义函数转化透视表每行数值：本月与下月同时为1（购买）的，在本月生成1;本月与下月分布为1,0（本月有下月没有购买），在本月生成0；本月为0，则在本月生成nan.
def transform(data):
    trans_list = []
    for i in range(5,11):
        if data[i] == 1:
            if data[i + 1] == 1:
                trans_list.append(1)
            if data[i + 1] == 0:
                trans_list.append(0)
        else:
            trans_list.append(np.NaN)
    #因为11月没有后续月份，所以填入nan
    trans_list.append(np.NaN)
    return pd.Series(trans_list)

#应用函数，apply表示使用函数转化前面的DataFrame,axis=1表示对象是整行
final_pivot = pivot_rep_tr.apply(transform,axis=1)
#对列重命名
final_pivot.columns = range(5,12)
final_pivot.head()
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://stdasein.life/post-images/1597373824299.png" alt="" width="500" loading="lazy"></figure>
<pre><code>#计算回购率
re_ratio = final_pivot.sum()/final_pivot.count()
re_ratio
#回购率：
5     0.513516
6     0.454410
7     0.463757
8     0.522471
9     0.565885
10    0.999968
11         NaN
dtype: float64

#可视化
# 指定默认字体
plt.rcParams['font.sans-serif'] = ['KaiTi'] 
# 解决保存图像是负号'-'显示为方块的问
plt.rcParams['axes.unicode_minus'] = False 题
plt.plot(re_ratio)
plt.xlabel('月份')
plt.ylabel('回购率')
plt.suptitle('7个月内回购率图')
</code></pre>
<p><img src="https://stdasein.life/post-images/1597373902863.png" alt="" width="500" loading="lazy"><br>
分析小结：</p>
<ul>
<li>回购率整体上分布在50%上下五个点的范围内，客户忠诚度高。</li>
<li>十月份的回购率达到了100%，说明了双十一的强大影响。</li>
</ul>
<h4 id="总结">总结</h4>
<p>从指标上看，留存率、复购率和回购率基本保持在50%以上，平台用户的忠诚度颇高，但同时也存在以下问题：</p>
<ul>
<li>新用户增长缓慢、乏力。</li>
<li>购物狂欢节（618、双十一）可以有效拉动指标增长，但可能不具有持续性。</li>
</ul>
<p>建议：</p>
<ul>
<li>开拓新市场，尝试新的获客渠道；增强平台的社交属性，打造购买—分享—交友的生态圈。</li>
<li>可以用机器学习辨识预测哪些用户在节日过后更可能留存，有针对性地进行营销以降低成本。</li>
</ul>
<h3 id="revenue营收获取">Revenue：营收获取</h3>
<p>假设1：路径越短，越有利于提高购买转化率。</p>
<p>假设2：特定的中间环节（加购、收藏）可以提高购买转化率。</p>
<p>验证思路：分析用户各路径的购买转化率，共有8条路径。</p>
<ul>
<li>浏览—&gt;流失</li>
<li>浏览—&gt;购买</li>
<li>浏览—&gt;收藏—&gt;购买</li>
<li>浏览—&gt;收藏—&gt;流失</li>
<li>浏览—&gt;加入购物车—&gt;购买</li>
<li>浏览—&gt;加入购物车—&gt;流失</li>
<li>浏览—&gt;加入购物车、收藏—&gt;购买</li>
<li>浏览—&gt;加入购物车、收藏—&gt;流失</li>
</ul>
<p>收集证据：</p>
<p>区分用户的不同行为路径</p>
<pre><code>#去重
user_full_con = user_full.drop_duplicates(['user_id','item_id','action_type'])
#将购买行为标记为10，以区分其他行为
user_full_con['action_type'] = user_full_con['action_type'].apply(lambda x: 10 if x == 2 else x)
#按用户、商品分组对用户行为进行求和
group_con = user_full_con[['user_id','item_id',
            'action_type']].groupby(['user_id','item_id']).sum()
group_con.head()
</code></pre>
<figure data-type="image" tabindex="11"><img src="https://stdasein.life/post-images/1597373973523.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#浏览—&gt;流失标记为10
pv_buy = group_con[group_con['action_type'] == 10]
#浏览—&gt;购买标记为0
pv_unbuy = group_con[group_con['action_type'] == 0]
#浏览—&gt;收藏—&gt;购买标记为13
pv_fav_buy = group_con[group_con['action_type'] == 13]
#浏览—&gt;收藏—&gt;流失标记为3
pv_fav_unbuy = group_con[group_con['action_type'] == 3]
#浏览—&gt;加入购物车—&gt;购买标记为11
pv_cart_buy = group_con[group_con['action_type'] == 11]
#浏览—&gt;加入购物车—&gt;流失标记为1
pv_cart_unbuy = group_con[group_con['action_type'] == 1]
#浏览—&gt;加入购物车、收藏—&gt;购买标记为14
pv_fav_cart_buy = group_con[group_con['action_type'] == 14]
#浏览—&gt;加入购物车、收藏—&gt;流失标记为4
pv_fav_cart_unbuy = group_con[group_con['action_type'] == 4]
</code></pre>
<p>计算不同路径的数量：</p>
<pre><code>list_action = [pv_buy,pv_unbuy,pv_fav_buy,pv_fav_unbuy,
            pv_cart_buy,pv_cart_unbuy,pv_fav_cart_buy,pv_fav_cart_unbuy]

def act_num(data):
    act_list = []
    for i in range(8):
        act = data[i].shape[0]
        act_list.append(act)
    return act_list

pv_buy                484778
pv_unbuy             4789692
pv_fav_buy             55924
pv_fav_unbuy          477300
pv_cart_buy             2086
pv_cart_unbuy           9898
pv_fav_cart_buy          169
pv_fav_cart_unbuy        474
dtype: int64
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374097076.png" alt="" width="500" loading="lazy"><br>
结论：从总环节转化率来看，假设1成立；从单环节转化率来看，假设2成立</p>
<p>分析发现：</p>
<ul>
<li>大部分用户（82%）在浏览后就会流失掉。</li>
<li>从总环节转化率来看，浏览—&gt;购买路径的转化率最高（8.329%）。</li>
<li>从单环节转化率来看，浏览—&gt;收藏、加购路径的转化率最高（26.3%），其次是浏览—&gt;加购路径（17.4%），同时，要注意的是，虽然浏览—&gt;收藏路径的转化率最低（10.5%），但其绝对人数（533224）远大于前两者。</li>
</ul>
<p>建议：</p>
<ul>
<li>针对用户浏览后迅速流失：调查流失原因。如果是推荐的商品不合适，可着手优化推荐系统；如果是网站引导有所欠缺，可进行相关的改善；如果是拉新渠道不对，获取的不是目标用户，可做相应调整。</li>
<li>浏览—&gt;购买路径的总环节转化率最高，说明路径越短，用户购买的可能性越高，因为更长的路径有可能冷却用户的购买热情。因此，可继续简化通向最终购买的环节。</li>
<li>可以使用触发物激活加购、收藏后不购买的用户，例如赠予优惠券等。</li>
</ul>
<h3 id="kmeans模型用户分层">Kmeans模型：用户分层</h3>
<p>分析思路与特征选取：</p>
<ul>
<li>使用Kmeans算法，基于最近一次消费的时间间隔、购买频率、年龄和性别对用户进行分群。</li>
<li>最近一次消费的时间间隔：假设今天是2015年12月12日，最近一次消费的时间间隔就是今天与最近一次消费时间的差值。</li>
<li>购买频率：用户的购买次数。</li>
<li>年龄和性别</li>
</ul>
<p>整理时间序列</p>
<pre><code>#为方便求出最近一次消费的时间间隔，对数据的时间序列进行整理
#假设今天为2015年12月12日
now = dt.datetime(2015,12,12)
#筛选出有购买行为的数据，同时剔除双十一的影响
user_buy = user_full[(user_full['action_type']==2) &amp; (user_full['month'] != 11)]
user_buy.drop(['month','day','year'],axis=1,inplace=True)
user_buy.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374179584.png" alt="" width="500" loading="lazy"><br>
计算时间间隔：</p>
<pre><code>#求最近一次消费的时间间隔
user_buy['time_interval'] = now - user_buy['date']
#转换日期格式
user_buy['time_interval'] = user_buy['time_interval'] / np.timedelta64(1,'D')
user_buy.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374222369.png" alt="" width="500" loading="lazy"><br>
提取特征：</p>
<pre><code>#按用户分组，聚合取得最近购买距今天数、购买频率、年龄、性别
user_RFAG = user_buy.groupby('user_id').agg({'time_interval':np.min,
                                        'user_id':np.size,
                                        'age_range':np.max,'gender':np.average})

user_RFAG.rename(columns = {'time_interval':'recency',
                        'user_id':'frequency'},inplace = True)
user_RFAG.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374262682.png" alt="" width="500" loading="lazy"><br>
寻找最佳分组数量：</p>
<pre><code>from sklearn.cluster import KMeans
#遍历k，找合适的k值，k表示将用户划分为k组
inertia = []
for i in range(1,15):
    model = KMeans(n_clusters=i,n_jobs=4)
    model.fit(user_RFAG)
    inertia.append(model.inertia_)

plt.plot(range(1,15),inertia,marker='o')
plt.xlabel('number of clusters')
plt.ylabel('distortions')
plt.show()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374310852.png" alt="" width="500" loading="lazy"><br>
可见，k=3时，误差相对较低，应将客户划分为3组。<br>
建立模型并分组：</p>
<pre><code>#建立模型并进行分群
k = 3
kmodel=KMeans(n_clusters=k,n_jobs=4)
kmodel.fit(user_RFAG)
#将结果合并
r1=pd.Series(kmodel.labels_).value_counts()
r2=pd.DataFrame(kmodel.cluster_centers_)
r3=pd.Series(['group1','group2','group3'])
r=pd.concat([r3,r1,r2],axis=1)
r.columns=['聚类类别','聚类个数']+list(user_RFAG.columns)
r.sort_values(by='聚类个数',ascending = False).assign(ratio =
                                                r['聚类个数']/r['聚类个数'].sum())
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374372085.png" alt="" width="500" loading="lazy"><br>
分析小结：</p>
<ul>
<li>group3购买间隔最短，频率最高，应划分为重要价值用户，可提供vip服务。</li>
<li>group1购买间隔、频率中等，应划分为一般价值用户，可通过触发物（例如推送告知特价商品、优惠活动等）提升其购买频率。</li>
<li>group2为普通用户，可与之保持联系，积极调查流失原因。</li>
</ul>
<h2 id="2货">2.货</h2>
<p>这部分将分析商品/商品种类的销量和销售关联性。</p>
<h3 id="商品销量分析">商品销量分析</h3>
<h4 id="1查看销售的总体情况">（1）查看销售的总体情况</h4>
<p>查看销量前十的商品：</p>
<pre><code>item_buy = user_buy[['item_id','action_type']].groupby('item_id').count().reset_index()
item_buy = item_buy.rename(columns={'action_type':'buy_times'})
item_buy.sort_values(by = 'buy_times',ascending = False).head(10)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374437956.png" alt="" width="300" loading="lazy"><br>
查看销量分布情况：</p>
<pre><code>item_buy_count = item_buy[['item_id','buy_times']].groupby('buy_times').count()
item_buy_count = item_buy_count.rename(columns = {'item_id':'item_num'})
item_buy_count_head = item_buy_count.sort_values(by = 'item_num',
                                                ascending = False).head(10)
item_buy_count_head.div(item_buy_count['item_num'].sum())
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://stdasein.life/post-images/1597374485072.png" alt="" width="200" loading="lazy"></figure>
<pre><code>from matplotlib.pyplot import MultipleLocator
plt.plot(item_buy_count_head)
plt.xlabel('购买次数')
plt.ylabel('商品数量')
plt.suptitle('不同购买次数的商品数量分布')
x_major_locator=MultipleLocator(1)
ax=plt.gca()
ax.xaxis.set_major_locator(x_major_locator)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374516180.png" alt="" width="400" loading="lazy"><br>
分析小结：</p>
<ul>
<li>销量最高的商品总共售出了846件，相比之下，接近80%的商品只出售过1到3次，呈现出长尾效应。</li>
</ul>
<h4 id="2分析商品销量的成因">（2）分析商品销量的成因</h4>
<p>假设：销量与流量、加购量、收藏量等因素相关<br>
验证思路：查看每个商品对应的点击、购买、加购和收藏量，分析其中的联系。<br>
收集证据：</p>
<pre><code>#筛选不同行为的数据
user_pv = user_full[user_full['action_type']==0]
user_cart = user_full[user_full['action_type']==1]
user_fav = user_full[user_full['action_type']==3]

#按商品分组，查看各商品不同行为的数量
item_pv = user_pv[['item_id','action_type']].groupby('item_id').count()
item_pv = item_pv.rename(columns = {'action_type':'pv_num'})

item_cart = user_cart[['item_id','action_type']].groupby('item_id').count()
item_cart = item_cart.rename(columns = {'action_type':'cart_num'})

item_fav= user_fav[['item_id','action_type']].groupby('item_id').count()
item_fav = item_fav.rename(columns = {'action_type':'fav_num'})

item_buy = item_buy.set_index('item_id')

#将各行为数量合并
item = pd.merge(item_buy,item_pv,on = 'item_id',how = 'inner')
item = pd.merge(item,item_cart,on = 'item_id',how = 'inner')
item = pd.merge(item,item_fav,on = 'item_id',how = 'inner')

#查看销量前十的商品
item.sort_values(by = 'buy_num', ascending = False).head(10)
</code></pre>
<figure data-type="image" tabindex="13"><img src="https://stdasein.life/post-images/1597374742809.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#查看浏览量前十的商品
item.sort_values(by = 'pv_num', ascending = False).head(10)
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://stdasein.life/post-images/1597374864539.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#查看加购量前十的商品
item.sort_values(by = 'cart_num', ascending = False).head(10)
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://stdasein.life/post-images/1597374896877.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#查看收藏量前十的商品
item.sort_values(by = 'fav_num', ascending = False).head(10)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597374931118.png" alt="" width="300" loading="lazy"><br>
结论：</p>
<ul>
<li>流量前十的商品中只有一件位于销量前十，可能说明：1）用户本身需求并不多，但平台推荐多，会导致点击率高，但最终销量低 。2）用户本身有需求，而平台并没有推荐到位，用户通过自己搜索和寻找，促使该商品销量高。</li>
<li>加购和收藏次数前十的商品都只有两件位于销量前十，说明用户有购买的想法却因为种种原因没有购买；</li>
</ul>
<p>建议：</p>
<ul>
<li>改善推荐系统，推荐用户需要的商品，提高流量的转化率；</li>
<li>调查加购/收藏用户的流失原因，改善各环节的流畅度（例如支付环节是否太过繁琐）；</li>
</ul>
<h3 id="商品种类分析">商品种类分析</h3>
<p>分析商品各种类的销量：</p>
<pre><code>user_buy_cat = user_buy[['cat_id','action_type']].groupby('cat_id').count()
user_buy_cat = user_buy_cat.rename(columns = {'action_type':'buy_count'})
user_buy_cat = user_buy_cat.sort_values(by = 'buy_count',ascending = False)
user_buy_cat = user_buy_cat.reset_index()
user_buy_cat.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375115434.png" alt="" width="300" loading="lazy"><br>
可见，销量前五的商品种类差距并不大。<br>
分析商品种类与用户行为的联系：</p>
<pre><code>#将具有购买行为的用户id和商品种类与全部数据合并，突显被购买商品种类对应的全部用户行为
user_behav_cat = pd.merge(user_buy[['user_id','cat_id']],user_full,
                        on = ['user_id','cat_id'],how = 'left')
#计算被购买商品种类对应的全部行为数
user_behav_cat = user_behav_cat[['cat_id','action_type']].groupby('cat_id').count()
user_behav_cat = user_behav_cat.rename(columns ={'action_type':'behav_count'} )
user_behav_cat.sort_values(by = 'behav_count',ascending=False).head()
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://stdasein.life/post-images/1597375153801.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#合并被购买商品种类的购买计数与行为计数
user_cat_buy_behav = pd.merge(user_buy_cat,user_behav_cat,on = 'cat_id',how = 'inner')
user_cat_buy_behav = user_cat_buy_behav.reset_index()
user_cat_buy_behav = user_cat_buy_behav.assign(ratio = user_cat_buy_behav['behav_count']/ user_cat_buy_behav['buy_count'])
user_cat_buy_behav.head(10)
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://stdasein.life/post-images/1597375184490.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#尾部商品种类
user_cat_buy_behav.tail(10)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375214816.png" alt="" width="300" loading="lazy"><br>
分析小结：</p>
<ul>
<li>头部商品种类销量大，但对应的行为—&gt;购买转化率较尾部种类低，平均20个行为转化为1个购买，而尾部商品种类的平均转化率为3：1</li>
</ul>
<p>原因假设：</p>
<ul>
<li>头部商品种类同质化较严重，竞争激烈，用户购买前需要更多的对比；而尾部商品种类则更具个性化，能更好地满足细分市场的需求。（因为数据不足无法继续论证）</li>
</ul>
<p>建议：</p>
<ul>
<li>尝试将热门商品种类与冷门商品种类捆绑销售，同时利用前者的高流量和后者的高转化。</li>
<li>注重长尾效应，积极开拓细分市场。</li>
</ul>
<h3 id="关联性分析">关联性分析</h3>
<h4 id="1分析各商品种类间的关联性">（1）分析各商品种类间的关联性</h4>
<p>在购买行为中，按用户id和日期分组，生成订单</p>
<pre><code>#计算总订单数
#假设一个用户一天内所有的购买都在一个订单
order_num = user_buy.groupby(['user_id','date']).count()
order_num.shape[0]
#总订单数
327130

#筛选出商品数量大于1的订单
order_items_num = order_num[order_num['item_id'] &gt; 1].reset_index()
order_items_num = order_items_num[['user_id','date','item_id']].rename(columns={'item_id':'item_num'})
order_items_num.sort_values(by = 'item_num',ascending = False).head(10)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375292383.png" alt="" width="300" loading="lazy"><br>
按销量排名前十的订单均发生在购物狂欢节。<br>
在订单中添加商品id和种类：</p>
<pre><code>#合并，突显订单中的商品和商品种类
order_items_cat = pd.merge(order_items_num, user_buy, on = ['user_id','date'], how = 'inner')
order_items_cat.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375339108.png" alt="" width="500" loading="lazy"><br>
显示两两同时出现的商品种类：</p>
<pre><code>relation_cat_a = order_items_cat[['user_id','date','cat_id']]
relation_cat_b = order_items_cat[['user_id','date','cat_id']]
#自连接
relation = pd.merge(relation_cat_a,relation_cat_b, on = ['user_id','date'], how = 'left')
#去重
relation = relation[relation['cat_id_x'] &lt; relation['cat_id_y']]
relation.head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375365800.png" alt="" width="300" loading="lazy"><br>
通过计算种类两两出现的频率来表示种类之间的关联性：</p>
<pre><code>rel_count = relation[['cat_id_x','cat_id_y','user_id']].groupby(['cat_id_x','cat_id_y']).count()
rel_count = rel_count.rename(columns = {'user_id':'relation'}).sort_values(by = 'relation',ascending = False)
rel_count.reset_index().head(10)
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375397457.png" alt="" width="300" loading="lazy"><br>
分析小结：</p>
<ul>
<li>某些商品种类之间存在关联性，用户购买了其中一种时可能也会购买另一种。</li>
<li>1213与420表现出与多个商品种类的强关联性</li>
</ul>
<p>建议：</p>
<ul>
<li>可根据商品种类间的关联性进行商品推荐</li>
</ul>
<h4 id="2分析各单独商品间的关联性">（2）分析各单独商品间的关联性</h4>
<p>与种类关联性分析的方法基本一致</p>
<pre><code>relation_item_a = order_items_cat[['user_id','date','item_id']]
relation_item_b = order_items_cat[['user_id','date','item_id']]
relation_item = pd.merge(relation_item_a,relation_item_b, 
                        on = ['user_id','date'], how = 'left')
relation_item = relation_item[relation_item['item_id_x'] &lt; relation_item['item_id_y']]
relation_item.head()
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://stdasein.life/post-images/1597375442580.png" alt="" width="300" loading="lazy"></figure>
<pre><code>rel_item_count = relation_item[['item_id_x','item_id_y','user_id']].groupby(['item_id_x','item_id_y']).count()
rel_item_count = rel_item_count.rename(columns = {'user_id':'relation'}).sort_values(by = 'relation',ascending = False)
rel_item_count.reset_index().head()
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375468348.png" alt="" width="300" loading="lazy"><br>
分析小结：</p>
<ul>
<li>282032号和642180号商品具有最高的关联性。</li>
<li>1029992号商品和590204号商品表现出与多个商品的关联性。</li>
</ul>
<h2 id="3场">3.场</h2>
<h3 id="卖家分析">卖家分析</h3>
<ul>
<li>分析各卖家流量与销量的联系</li>
</ul>
<p>将用户对卖家商品的所有行为都视为卖家的流量。</p>
<pre><code>#按卖家分组，统计商品数量
seller_group = user_full[['seller_id','item_id']].groupby('seller_id').count().reset_index()
seller_group = seller_group.rename(columns = {'item_id':'item_count'})
seller_group.sort_values(by = 'item_count',ascending = False).head(10)
</code></pre>
<figure data-type="image" tabindex="19"><img src="https://stdasein.life/post-images/1597375509797.png" alt="" width="200" loading="lazy"></figure>
<pre><code>#统计销售商品数量
seller_buy_group = user_buy[['seller_id','item_id']].groupby('seller_id').count().reset_index()
seller_buy_group = seller_buy_group.rename(columns = {'item_id':'item_buy_count'})

#合并对比，算出转化率
seller_combined = pd.merge(seller_group,seller_buy_group,on = 'seller_id',how = 'left')
seller_combined = seller_combined.assign(ratio = seller_combined['item_buy_count']/seller_combined['item_count'])
seller_combined.sort_values(by = 'item_buy_count',ascending = False).head(10)
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://stdasein.life/post-images/1597375547141.png" alt="" width="300" loading="lazy"></figure>
<pre><code>#计算平均转化率
seller_combined['ratio'].mean()
0.0781
</code></pre>
<p>分析总结：</p>
<p>销量前十的卖家有六家同时也是流量前十的卖家，说明流量与销量正相关;</p>
<p>销量前十的高流量卖家转化率普遍较低，低于7.8%的平均水平，应该关注这些卖家的获客成本，分析其推广、营销费用是否过多，获客渠道是否合适等;</p>
<p>在销量前十的卖家中，1200号卖家以最低的流量获取了较高的销量，转化率一枝独秀，高达26.5%，应进一步研究:<br>
原因假设：客户忠诚度高<br>
验证思路：比较1200号卖家和销量第一的3828号卖家的复购率。<br>
收集证据：</p>
<pre><code>#生成透视表，行索引为用户id,列索引为月份
seller_1200 = user_full[user_full['seller_id']==1200]
seller_1200_buy = seller_1200[seller_1200['action_type']==2]
pivot_1200_re = seller_1200_buy.pivot_table(columns='month',index='user_id',
                                            values='action_type',aggfunc='count')

#转换数值以计算复购率
pivot_1200_re = pivot_1200_re.applymap(lambda x:1 if x&gt;1 else 0 if x == 1 else np.nan)

#卖家1200复购率
ratio_1200 = pd.Series(pivot_1200_re.sum()/pivot_1200_re.count(),name = 're_ratio')

#计算卖家3828复购率
seller_3828 = user_full[user_full['seller_id']==3828]
seller_3828_buy = seller_3828[seller_3828['action_type']==2]
pivot_3828_re = seller_3828_buy.pivot_table(columns='month',index='user_id',values='action_type',aggfunc='count')
pivot_3828_re = pivot_3828_re.applymap(lambda x:1 if x&gt;1 else 0 if x == 1 else np.nan)
ratio_3828 = pd.Series(pivot_3828_re.sum()/pivot_3828_re.count(),name = 're_ratio')

#合并
ration_merge = pd.merge(ratio_1200,ratio_3828,on = 'month',how = 'inner')
ration_merge = ration_merge.rename(columns = {'re_ratio_x':'re_ratio_1200','re_ratio_y':'re_ratio_3828'})
ration_merge.applymap(lambda x: format(x,'.2%'))
</code></pre>
<p><img src="https://stdasein.life/post-images/1597375698314.png" alt="" width="300" loading="lazy"><br>
结论：</p>
<ul>
<li>假设成立，1200号卖家的复购率整体上高于3828号卖家，如果其他条件不变，1200号卖家的顾客忠诚度更高。</li>
</ul>
<h1 id="六-增长建议">六、增长建议</h1>
<p>1.获取新用户方面：</p>
<ul>
<li>积极探索开发主流人群（25-35岁女性）之外群体的商机，尝试比较不同的获客渠道，平衡成本与收益；</li>
</ul>
<p>2.提高用户的体验与粘性：</p>
<ul>
<li>探寻增强平台的社交属性，打造购买—分享—交友的生态圈；</li>
<li>可以通过机器学习、数据挖掘预测哪些用户在节日过后更可能留存，有针对性地进行营销；</li>
<li>优化推荐系统辅助用户决策；</li>
</ul>
<p>3.促进用户交易：</p>
<ul>
<li>简化通向购买行为的环节；</li>
<li>可以使用触发物激活加购、收藏后不购买的用户，例如赠予优惠券等；</li>
<li>积极向用户推荐关联性高的商品，促进连带销售；</li>
<li>尝试将热门商品与冷门商品捆绑销售，同时利用前者的高流量和后者的高转化；</li>
</ul>
<p>4.用户画像/精准运营</p>
<ul>
<li>针对用户的不同属性进行分层管理；</li>
</ul>
<h1 id="七-机器学习">七、机器学习</h1>
<pre><code>import os
import pickle
import warnings
warnings.filterwarnings('ignore')
</code></pre>
<h2 id="数据压缩">数据压缩</h2>
<pre><code>def compressData(inputData):
    for eachType in set(inputData.dtypes.values):
    #检查属于什么类型
        if 'int' in str(eachType):
        #对每列进行转换
            for i in inputData.select_dtypes(eachType).columns.values:
                if inputData[i].min() &lt; 0:
                    inputData[i] = pd.to_numeric(inputData[i],downcast='signed')
                else:
                    inputData[i] = pd.to_numeric(inputData[i],downcast='unsigned')      
        elif 'float' in str(eachType):
            for i in inputData.select_dtypes(eachType).columns.values:   
                inputData[i] = pd.to_numeric(inputData[i],downcast='float')
        elif 'object' in str(eachType):
            for i in inputData.select_dtypes(eachType).columns.values: 
                inputData[i] = trainData7[i].astype('category')
        return inputData

userInfo = pd.read_csv('user_log_format1.csv')
print('Before compressed:\n',userInfo.info())
userInfo = compressData(userInfo)
print('After compressed:\n',userInfo.info())

&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 54925330 entries, 0 to 54925329
Data columns (total 7 columns):
#   Column       Dtype  
---  ------       -----  
0   user_id      int64  
1   item_id      int64  
2   cat_id       int64  
3   seller_id    int64  
4   brand_id     float64
5   time_stamp   int64  
6   action_type  int64  
dtypes: float64(1), int64(6)
memory usage: 2.9 GB
Before compressed:
None
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 54925330 entries, 0 to 54925329
Data columns (total 7 columns):
#   Column       Dtype  
---  ------       -----  
0   user_id      uint32 
1   item_id      uint32 
2   cat_id       uint16 
3   seller_id    uint16 
4   brand_id     float64
5   time_stamp   uint16 
6   action_type  uint8  
dtypes: float64(1), uint16(3), uint32(2), uint8(1)
memory usage: 1.2 GB
After compressed:
None

#将压缩成功的数据类型dtypes进行输出成列表，便于往后的读入
dtypes_type = [i.name for i in userInfo.dtypes.values]
column_types = dict(zip(userInfo.columns, dtypes_type))
column_types
#例如以下的read_csv的读入
userInfo = pd.read_csv('user_log_format1.csv',dtype=column_types)
</code></pre>
<h2 id="数据清理">数据清理</h2>
<pre><code>def get_Logs():
    &quot;&quot;&quot;
    :parameters: None: None
    :return: userLog: pd.Dataframe
    :Purpose: 
    方便与其他函数调取原始的行为数据，同时已对缺失省进行调整
    使用pickle模块进行序列化，加快速度读写
    &quot;&quot;&quot;
    filePath = 'Logs.pkl'
    if os.path.exists(filePath):
        userLog = pickle.load(open(filePath,'rb'))
    else:
        userLog = pd.read_csv('user_log_format1.csv',dtype=column_types)
        print('Is null? ',userLog.isnull().any())

        ## 对brand_id缺失值进行处理
        missingIndex = userLog[userLog.brand_id.isnull()].index
        ## 思路：找到所有商店所拥有brand_id的众数，并对所缺失的brand_id与其相对应的商店进行填充
        sellerMode = userLog.groupby(['seller_id']).apply(lambda x:x.brand_id.mode()[0]).reset_index()
        pickUP = userLog.loc[missingIndex]
        pickUP = pd.merge(pickUP,sellerMode,how='left',on=['seller_id'])[0].astype('float32')
        pickUP.index = missingIndex
        userLog.loc[missingIndex,'brand_id'] = pickUP
        del pickUP,sellerMode,missingIndex
        print('--------------------')
        print('Is null? ',userLog.isnull().any())
        pickle.dump(userLog,open(filePath,'wb'))
    return userLog
</code></pre>
<h2 id="特征提取">特征提取</h2>
<p>提取基于用户的特征</p>
<pre><code>from sklearn.preprocessing import MinMaxScaler

def get_userInfo_feat():
    filePath = 'userInfo_Features.pkl'
    if os.path.exists(filePath):
        userInfo = pickle.load(open(filePath,'rb'))
    else:
        # 统计提取原始用户信息数据,并对age和gender的缺失值做处理，同时做离散化操作...
        ### --------------------------------------------------------------------------
        userInfo = pd.read_csv('user_info_format1.csv')
        userInfo.age_range.fillna(userInfo.age_range.median(),inplace=True)
        userInfo.gender.fillna(userInfo.gender.mode()[0],inplace=True)
        print('Check any missing value?\n',userInfo.isnull().any())
        df_age = pd.get_dummies(userInfo.age_range,prefix='age')
        df_sex = pd.get_dummies(userInfo.gender)
        df_sex.rename(columns={0:'female',1:'male',2:'unknown'},inplace=True)
        userInfo = pd.concat([userInfo.user_id, df_age, df_sex], axis=1)
        del df_age,df_sex

        ## 统计点击，加入购物车，购买，收藏的总次数
        ## 统计点击购买转化率，加入购物车购买转化率，被收藏次数购买转化率
        ### --------------------------------------------------------------------------
        logs = get_Logs()
        # 提取全部的原始行为数据...
        print('--&gt;Getting user logs&lt;-- is finished...')
        totalActions = logs[[&quot;user_id&quot;,&quot;action_type&quot;]]
        df = pd.get_dummies(totalActions['action_type'],prefix='userTotalAction')
        totalActions = pd.concat([totalActions, df], axis=1).groupby(['user_id'], as_index=False).sum()
        del df
        totalActions.drop(&quot;action_type&quot;, axis=1,inplace=True)

        totalActions['userTotalAction_0_ratio'] = np.log1p(totalActions['userTotalAction_2']) - np.log1p(totalActions['userTotalAction_0'])
        totalActions['userTotalAction_1_ratio'] = np.log1p(totalActions['userTotalAction_2']) - np.log1p(totalActions['userTotalAction_1'])
        totalActions['userTotalAction_3_ratio'] = np.log1p(totalActions['userTotalAction_2']) - np.log1p(totalActions['userTotalAction_3'])
        print('--&gt;Counting total numbers of clicking,addCart,buying,favor in various Users&lt;-- are finished...')  
        ## 将统计好的数量和转化率进行拼接
        userInfo = pd.merge(userInfo,totalActions,how='left',on=['user_id'])
        del totalActions
        
        mms = MinMaxScaler()

        typeCounts = logs[[&quot;user_id&quot;,&quot;seller_id&quot;,&quot;cat_id&quot;,&quot;item_id&quot;,&quot;brand_id&quot;,&quot;time_stamp&quot;]]
        ## 用户六个月中做出行为的种类数量
        typeCount_result = typeCounts.groupby(['user_id'])['cat_id'].nunique()
        ### 用户六个月中做出行为的品牌数量
        typeCount_result = pd.concat([typeCount_result,typeCounts.groupby(['user_id'])['brand_id'].nunique()],axis=1)
        ### 用户六个月中做出行为的天数
        typeCount_result = pd.concat([typeCount_result,typeCounts.groupby(['user_id'])['time_stamp'].nunique()],axis=1)
        typeCount_result.rename(columns={'cat_id':'cat_counts','brand_id':'brand_counts','time_stamp':'active_days'},inplace=True)
        typeCount_result.reset_index(inplace=True)
        typeCount_result['cat_counts'] = mms.fit_transform(typeCount_result[['cat_counts']])
        typeCount_result['brand_counts'] = mms.fit_transform(typeCount_result[['brand_counts']])
        typeCount_result['active_days'] = mms.fit_transform(typeCount_result[['active_days']])
        print('--&gt;Counting total numbers of items, cat, brand and action_days in various Users&lt;-- are finished...')
        ## 将统计好的数量
        userInfo = pd.merge(userInfo,typeCount_result,how='left',on=['user_id'])
        del typeCount_result,typeCounts
        
        ## 统计双十一之前，重复购买过的商家数量
        ### --------------------------------------------------------------------------
        repeatSellerCount = logs[[&quot;user_id&quot;,&quot;seller_id&quot;,&quot;time_stamp&quot;,&quot;action_type&quot;]]
        repeatSellerCount = repeatSellerCount[(repeatSellerCount.action_type == 2) &amp; (repeatSellerCount.time_stamp &lt; 1111)]
        repeatSellerCount.drop_duplicates(inplace=True)
        repeatSellerCount = repeatSellerCount.groupby(['user_id','seller_id'])['time_stamp'].count().reset_index()
        repeatSellerCount = repeatSellerCount[repeatSellerCount.time_stamp &gt; 1]
        repeatSellerCount = repeatSellerCount.groupby(['user_id'])['seller_id'].count().reset_index()
        repeatSellerCount.rename(columns={'seller_id':'repeat_seller_count'},inplace=True)
        repeatSellerCount['repeat_seller_count'] = mms.fit_transform(repeatSellerCount[['repeat_seller_count']])
        print('--&gt;Counting seller number of repeat buying in various Users&lt;-- are finished...')
        userInfo = pd.merge(userInfo,repeatSellerCount,how='left',on=['user_id'])
        userInfo.repeat_seller_count.fillna(0,inplace=True)
        del repeatSellerCount,logs
        
        logs = get_Logs()

        ## 用户除了目标商家外，对其他重复回购商店的点击，加入购物车，购买，收藏的平均值
        trainData = pd.read_csv('train_format1.csv')
        trainData.rename(columns={'merchant_id':'seller_id'},inplace=True)
        testData = pd.read_csv('test_format1.csv')
        testData.rename(columns={'merchant_id':'seller_id'},inplace=True)
        targetIndex = pd.concat([trainData[['user_id', 'seller_id']],testData[['user_id', 'seller_id']]],ignore_index=True)
        removeLogs = pd.merge(targetIndex,logs,on=['user_id', 'seller_id'])
        del trainData,testData,targetIndex
        logs.drop(removeLogs.index,inplace=True)

        ## 每个用户（除去目标用户对目标商家的记录）对不同商家的行为总数
        actionsRate = logs[[&quot;user_id&quot;,&quot;seller_id&quot;,&quot;action_type&quot;]]
        df = pd.get_dummies(actionsRate['action_type'],prefix='repeat_actionRate')
        actionsRate = pd.concat([actionsRate, df], axis=1).groupby(['user_id','seller_id'], as_index=False).sum()
        del df
        actionsRate.drop(&quot;action_type&quot;, axis=1,inplace=True)
        
        ## 找出每个用户对回购商家的行为总数
        repeat = logs[[&quot;user_id&quot;,&quot;seller_id&quot;,&quot;time_stamp&quot;,&quot;action_type&quot;]]
        repeat = repeat[(repeat.action_type == 2) &amp; (repeat.time_stamp &lt; 1111)]
        repeat.drop_duplicates(inplace=True)
        repeat = repeat.groupby(['user_id','seller_id'])['time_stamp'].count().reset_index()
        repeat = repeat[repeat.time_stamp &gt; 1]
        actionsRate = pd.merge(actionsRate,repeat,on=['user_id','seller_id'])
        actionsRate.drop(&quot;time_stamp&quot;, axis=1,inplace=True)
        del repeat
        actionsRate = actionsRate.groupby(['user_id'])[['repeat_actionRate_0','repeat_actionRate_1','repeat_actionRate_2','repeat_actionRate_3']].mean().reset_index()
        actionsRate['repeat_actionRate_0'] = mms.fit_transform(actionsRate[['repeat_actionRate_0']])
        actionsRate['repeat_actionRate_1'] = mms.fit_transform(actionsRate[['repeat_actionRate_1']])
        actionsRate['repeat_actionRate_2'] = mms.fit_transform(actionsRate[['repeat_actionRate_2']])
        actionsRate['repeat_actionRate_3'] = mms.fit_transform(actionsRate[['repeat_actionRate_3']])
        userInfo = pd.merge(userInfo,actionsRate,how='left',on=['user_id'])
        userInfo.repeat_actionRate_0.fillna(0,inplace=True)
        userInfo.repeat_actionRate_1.fillna(0,inplace=True)
        userInfo.repeat_actionRate_2.fillna(0,inplace=True)
        userInfo.repeat_actionRate_3.fillna(0,inplace=True)
        del actionsRate
        
        ## 统计每月的点击次数，每月的加入购物次数，每月的购买次数，每月的收藏次数
        ### --------------------------------------------------------------------------
        monthActionsCount = logs[[&quot;user_id&quot;,&quot;time_stamp&quot;,&quot;action_type&quot;]]
        result = list()
        for i in range(5,12):
            start = int(str(i)+'00')
            end = int(str(i)+'30')
            example = monthActionsCount[(monthActionsCount.time_stamp &gt;= start) &amp; (monthActionsCount.time_stamp &lt; end)]
            df = pd.get_dummies(example['action_type'],prefix='%d_Action'%i)
            example.loc[:,'time_stamp'] = example.time_stamp.apply(lambda x: int(str(x)[0]) if len(str(x)) == 3 else int(str(x)[:2]))
            result.append(pd.concat([example, df], axis=1).groupby(['user_id','time_stamp'],as_index=False).sum())

        for i in range(0,7):
            userInfo = pd.merge(userInfo,result[i],how='left',on=['user_id'])
            userInfo.fillna(0,inplace=True)
            
        pickle.dump(userInfo, open(filePath, 'wb'))
    return userInfo
</code></pre>
<p>提取基于卖家的特征</p>
<pre><code>def get_sellerInfo_feat():
    filePath = 'sellerInfo_Features.pkl'
    if os.path.exists(filePath):
        sellers = pickle.load(open(filePath,'rb'))
    else:
        # 提取全部的原始行为数据...
        logs = get_Logs()
        print('--&gt;Getting user logs&lt;-- is finished...')

        ## 统计每个商户的商品，种类，品牌总数，并放入dataFrame[seller_id,xx_number]为列名，便于往后的拼接
        itemNumber = logs.groupby(['seller_id'])['item_id'].nunique().reset_index()
        catNumber = logs.groupby(['seller_id'])['cat_id'].nunique().reset_index()
        brandNumber = logs.groupby(['seller_id'])['brand_id'].nunique().reset_index()
        itemNumber.rename(columns={'item_id':'item_number'},inplace=True)
        catNumber.rename(columns={'cat_id':'cat_number'},inplace=True)
        brandNumber.rename(columns={'brand_id':'brand_number'},inplace=True)
        print('--&gt;Counting numbers of product, category, brand in various sellers&lt;-- are finished...')
        
        ## 统计商户重复买家总数量
        repeatPeoCount = logs[(logs.time_stamp &lt; 1111) &amp; (logs.action_type == 2)]
        repeatPeoCount = repeatPeoCount.groupby(['seller_id'])['user_id'].value_counts().to_frame()
        repeatPeoCount.rename(columns={'user_id':'Buy_Number'},inplace=True)
        repeatPeoCount.reset_index(inplace=True)
        repeatPeoCount = repeatPeoCount[repeatPeoCount.Buy_Number &gt; 1]
        repeatPeoCount = repeatPeoCount.groupby(['seller_id']).apply(lambda x:len(x.user_id)).reset_index()
        repeatPeoCount = pd.merge(pd.DataFrame({'seller_id':range(1, 4996 ,1)}),repeatPeoCount,how='left',on=['seller_id']).fillna(0)
        repeatPeoCount.rename(columns={0:'repeatBuy_peopleNumber'},inplace=True)
        print('--&gt;Counting numbers of repeat buying buyers in various sellers&lt;-- are finished...')
        
        ##统计被点击，被加入购物车，被购买，被收藏次数
        ###统计被点击购买转化率，被加入购物车购买转化率，被收藏次数购买转化率
        sellers = logs[[&quot;seller_id&quot;,&quot;action_type&quot;]]
        df = pd.get_dummies(sellers['action_type'],prefix='seller')
        sellers = pd.concat([sellers, df], axis=1).groupby(['seller_id'], as_index=False).sum()
        sellers.drop(&quot;action_type&quot;, axis=1,inplace=True)
        #　构造转化率字段
        sellers['seller_0_ratio'] = np.log1p(sellers['seller_2']) - np.log1p(sellers['seller_0'])
        sellers['seller_1_ratio'] = np.log1p(sellers['seller_2']) - np.log1p(sellers['seller_1'])
        sellers['seller_3_ratio'] = np.log1p(sellers['seller_2']) - np.log1p(sellers['seller_3'])
        print('--&gt;Counting numbers of clicking, addCart, buying,subcribes in various sellers&lt;-- are finished...')

        ###统计每个商户被点击的人数，被加入购物车的人数，被购买的人数，被收藏的人数
        peoCount = logs[[&quot;user_id&quot;,&quot;seller_id&quot;,&quot;action_type&quot;]]
        df = pd.get_dummies(peoCount['action_type'],prefix='seller_peopleNumber')
        peoCount = pd.concat([peoCount, df], axis=1)
        peoCount.drop(&quot;action_type&quot;, axis=1,inplace=True)
        peoCount.drop_duplicates(inplace=True)
        df1 = peoCount.groupby(['seller_id']).apply(lambda x:x.seller_peopleNumber_0.sum())
        df2 = peoCount.groupby(['seller_id']).apply(lambda x:x.seller_peopleNumber_1.sum())
        df3 = peoCount.groupby(['seller_id']).apply(lambda x:x.seller_peopleNumber_2.sum())
        df4 = peoCount.groupby(['seller_id']).apply(lambda x:x.seller_peopleNumber_3.sum())
        peoCount = pd.concat([df1, df2,df3, df4], axis=1).reset_index()
        peoCount.rename(columns={0:'seller_peopleNum_0',1:'seller_peopleNum_1',2:'seller_peopleNum_2',3:'seller_peopleNum_3'},inplace=True)
        print('--&gt;Counting numbers of product, category, brand in various sellers&lt;-- are finished...')
        
        ###对各种统计表根据seller_id进行拼接
        sellers = pd.merge(sellers,peoCount,on=['seller_id'])
        sellers = pd.merge(sellers,itemNumber,on=['seller_id'])
        sellers = pd.merge(sellers,catNumber,on=['seller_id'])
        sellers = pd.merge(sellers,brandNumber,on=['seller_id'])
        sellers = pd.merge(sellers,repeatPeoCount,on=['seller_id'])

        ###对计数型的特征进行最小大化
        mms = MinMaxScaler()
        sellers['seller_0'] = mms.fit_transform(sellers[['seller_0']])
        sellers['seller_1'] = mms.fit_transform(sellers[['seller_1']])
        sellers['seller_2'] = mms.fit_transform(sellers[['seller_2']])
        sellers['seller_3'] = mms.fit_transform(sellers[['seller_3']])
        sellers['seller_peopleNum_0'] = mms.fit_transform(sellers[['seller_peopleNum_0']])
        sellers['seller_peopleNum_1'] = mms.fit_transform(sellers[['seller_peopleNum_1']])
        sellers['seller_peopleNum_2'] = mms.fit_transform(sellers[['seller_peopleNum_2']])
        sellers['seller_peopleNum_3'] = mms.fit_transform(sellers[['seller_peopleNum_3']])
        sellers['item_number'] = mms.fit_transform(sellers[['item_number']])
        sellers['cat_number'] = mms.fit_transform(sellers[['cat_number']])
        sellers['brand_number'] = mms.fit_transform(sellers[['brand_number']])
        sellers['repeatBuy_peopleNumber'] = mms.fit_transform(sellers[['repeatBuy_peopleNumber']])

        del df1,df2,df3,df4,itemNumber,catNumber,brandNumber,df,logs,mms,peoCount,repeatPeoCount
        pickle.dump(sellers,open(filePath,'wb'))
    return sellers
</code></pre>
<p>提取用户—卖家间的特征</p>
<pre><code>def get_userSellerActions_feat():
    filePath = 'userSellerActions.pkl'
    if os.path.exists(filePath):
        df_result = pickle.load(open(filePath,'rb'))
    else:
        ## 提取预测目标的行为数据
        logs = get_Logs()
        print('--&gt;Getting user logs&lt;-- is finished...')
        trainData = pd.read_csv('train_format1.csv')
        trainData.rename(columns={'merchant_id':'seller_id'},inplace=True)
        testData = pd.read_csv('test_format1.csv')
        testData.rename(columns={'merchant_id':'seller_id'},inplace=True)
        targetIndex = pd.concat([trainData[['user_id', 'seller_id']],testData[['user_id', 'seller_id']]],ignore_index=True)
        logs = pd.merge(targetIndex,logs,on=['user_id', 'seller_id'])
        del trainData,testData,targetIndex
        
        ### 统计用户对预测的商店的行为特征，例如点击，加入购物车，购买，收藏的总次数,以及各种转化率
        df_result = logs[[&quot;user_id&quot;, &quot;seller_id&quot;,&quot;action_type&quot;]]
        df = pd.get_dummies(df_result['action_type'],prefix='userSellerAction')
        df_result = pd.concat([df_result, df], axis=1).groupby(['user_id', 'seller_id'], as_index=False).sum()
        del df
        df_result.drop(&quot;action_type&quot;, axis=1,inplace=True)
        df_result['userSellerAction_0_ratio'] = np.log1p(df_result['userSellerAction_2']) - np.log1p(df_result['userSellerAction_0'])
        df_result['userSellerAction_1_ratio'] = np.log1p(df_result['userSellerAction_2']) - np.log1p(df_result['userSellerAction_1'])
        df_result['userSellerAction_3_ratio'] = np.log1p(df_result['userSellerAction_2']) - np.log1p(df_result['userSellerAction_3'])
        
        ###统计用户对预测商店，所点击的总天数
        clickDays = logs[logs.action_type == 0]
        clickDays = clickDays[[&quot;user_id&quot;, &quot;seller_id&quot;,&quot;time_stamp&quot;,&quot;action_type&quot;]]
        clickDays = clickDays.groupby(['user_id', 'seller_id']).apply(lambda x:x.time_stamp.nunique()).reset_index()
        clickDays.rename(columns={0:'click_days'},inplace=True)
        df_result = pd.merge(df_result,clickDays,how='left',on=['user_id', 'seller_id'])
        df_result.click_days.fillna(0,inplace=True)
        del clickDays
        
        ### 购买商品种类数量，点击商品种类数量        
        catTypeCount = logs[[&quot;user_id&quot;, &quot;seller_id&quot;,&quot;cat_id&quot;,&quot;action_type&quot;]]
        catTypeCount = catTypeCount[(catTypeCount.action_type == 0) | (catTypeCount.action_type == 2)]
        cat_result = catTypeCount[catTypeCount.action_type == 2].groupby(['user_id', 'seller_id']).apply(lambda x:x.cat_id.nunique()).reset_index()
        cat_result.rename(columns={0:'buy_catType_count'},inplace=True)
        cat_result = pd.merge(cat_result,catTypeCount[catTypeCount.action_type == 0].groupby(['user_id', 'seller_id']).apply(lambda x:x.cat_id.nunique()).reset_index(),how='left',on=['user_id', 'seller_id'])
        cat_result.rename(columns={0:'click_catType_count'},inplace=True)
        cat_result.click_catType_count.fillna(0,inplace=True)
        df_result = pd.merge(df_result,cat_result,how='left',on=['user_id', 'seller_id'])
        del catTypeCount,cat_result
        
        pickle.dump(df_result,open(filePath,'wb'))
    return df_result
</code></pre>
<h2 id="构建模型">构建模型</h2>
<p>准备训练集</p>
<pre><code>def make_train_set():
    filePath = 'trainSetWithFeatures.pkl'
    if os.path.exists(filePath):
        trainSet = pickle.load(open(filePath,'rb'))
    else:     
        trainSet = pd.read_csv('train_format1.csv')
        trainSet.rename(columns={'merchant_id':'seller_id'},inplace=True)
        
        ##--------------------------------------------------
        ##   此特征： 加入用户基本信息特征
        userInfo = get_userInfo_feat()
        trainSet = pd.merge(trainSet,userInfo,how='left',on=['user_id'])
        del userInfo
        
        ##-------------------------------------------------- 
        ##   此特征： 加入商户基本信息特征，体现商店自身的热度和热门度
        sellerInfo = get_sellerInfo_feat()
        trainSet = pd.merge(trainSet,sellerInfo,how='left',on=['seller_id'])
        del sellerInfo
        
        ##--------------------------------------
        ##   此特征： 加入用户 - 商户之间的信息特征
        userSellers = get_userSellerActions_feat()
        trainSet = pd.merge(trainSet,userSellers,how='left',on=['user_id','seller_id'])
        del userSellers

        pickle.dump(trainSet,open(filePath,'wb'))
    return trainSet

trainSet = pickle.load(open('trainSetWithFeatures.pkl','rb'))
X_train = trainSet.drop(['label'],axis = 1)
y_train = trainSet['label']
</code></pre>
<p>模型评估</p>
<pre><code>#引进工具库
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from numpy import mean, std
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from xgboost import XGBClassifier

#定义模型
def get_models():
models = dict()
models['LR'] = LogisticRegression()
models['SVC'] = LinearSVC()
models['DTC'] = DecisionTreeClassifier()
models['forest'] = RandomForestClassifier()
models['ABC'] = AdaBoostClassifier()
return models

models = get_models()

#定义评分函数
def evaluate_model(model):
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=42)
    scores = cross_val_score(model,X_train,y_train,
            scoring='roc_auc',cv=cv,n_jobs=-1)

    return scores

results, names = list(), list()
for name, model in models.items():
    scores = evaluate_model(model)
    results.append(scores)

    names.append(name)

    print('&gt;%s %.3f'%(name,mean(scores)))  

&gt;LR 0.508
&gt;SVC 0.522
&gt;DTC 0.520
&gt;forest 0.639
&gt;ABC 0.654
</code></pre>
]]></content>
    </entry>
</feed>